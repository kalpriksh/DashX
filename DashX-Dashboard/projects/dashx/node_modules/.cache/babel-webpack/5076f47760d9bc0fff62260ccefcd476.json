{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Inject, Directive, EventEmitter, Input, ViewChild, Output, ChangeDetectionStrategy, ViewEncapsulation, NgModule, HostListener, APP_INITIALIZER } from '@angular/core';\nimport * as i10 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1$2 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i6 from 'angular-gridster2';\nimport { GridType, CompactType, DisplayGrid, GridsterModule } from 'angular-gridster2';\nimport * as i1 from '@angular/common/http';\nimport { HttpClientModule } from '@angular/common/http';\nimport * as i1$1 from '@angular/material/dialog';\nimport { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\nimport * as i4 from '@angular/material/form-field';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i4$1 from '@angular/material/input';\nimport { MatInputModule } from '@angular/material/input';\nimport * as i2 from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport * as i4$4 from '@angular/material/toolbar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport * as i4$2 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i4$3 from '@angular/material/grid-list';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport * as i8 from '@angular/material/menu';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i4$6 from '@angular/material/tabs';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport * as i3$1 from '@angular/material/expansion';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport * as i7 from '@angular/material/list';\nimport { MatListModule } from '@angular/material/list';\nimport * as i4$5 from '@angular/material/slider';\nimport { MatSliderModule } from '@angular/material/slider';\nimport * as i5 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i5$1 from 'ng-apexcharts';\nimport { NgApexchartsModule } from 'ng-apexcharts';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MAT_COLOR_FORMATS, NGX_MAT_COLOR_FORMATS } from '@angular-material-components/color-picker';\nimport { MatDividerModule } from '@angular/material/divider';\nimport * as XLSX from 'xlsx';\n\nfunction CreateDashboardComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelementStart(1, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function CreateDashboardComponent_div_10_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.OpenDashboard();\n    });\n    i0.ɵɵelementStart(2, \"p\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\", 9);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", item_r1.content, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r1.description, \" \");\n  }\n}\n\nfunction DashboardContainerComponent_gridster_item_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"gridster-item\", 7);\n    i0.ɵɵelement(1, \"app-create-dashboard\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"item\", item_r1.position);\n  }\n}\n\nfunction ChartSetupComponent_mat_expansion_panel_3_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function ChartSetupComponent_mat_expansion_panel_3_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11._chartSetupData.title.text = \"\";\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"close\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function () {\n  return {\n    standalone: true\n  };\n};\n\nfunction ChartSetupComponent_mat_expansion_panel_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-expansion-panel\", 3);\n    i0.ɵɵlistener(\"opened\", function ChartSetupComponent_mat_expansion_panel_3_Template_mat_expansion_panel_opened_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.panelOpenState = true;\n    })(\"closed\", function ChartSetupComponent_mat_expansion_panel_3_Template_mat_expansion_panel_closed_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.panelOpenState = false;\n    });\n    i0.ɵɵelementStart(1, \"mat-expansion-panel-header\");\n    i0.ɵɵelementStart(2, \"mat-panel-title\");\n    i0.ɵɵtext(3, \" Chart Title \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-form-field\");\n    i0.ɵɵelementStart(5, \"input\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function ChartSetupComponent_mat_expansion_panel_3_Template_input_ngModelChange_5_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16._chartSetupData.title.text = $event;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, ChartSetupComponent_mat_expansion_panel_3_button_6_Template, 3, 0, \"button\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1._chartSetupData.title.text)(\"ngModelOptions\", i0.ɵɵpureFunction0(3, _c0));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1._chartSetupData && ctx_r1._chartSetupData.title.text);\n  }\n}\n\nfunction ChartSetupComponent_mat_list_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-option\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r17 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r17);\n  }\n}\n\nfunction ChartSetupComponent_mat_expansion_panel_10_div_9_mat_list_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r24 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r24);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r24, \" \");\n  }\n}\n\nfunction ChartSetupComponent_mat_expansion_panel_10_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"mat-expansion-panel\", 3);\n    i0.ɵɵlistener(\"opened\", function ChartSetupComponent_mat_expansion_panel_10_div_9_Template_mat_expansion_panel_opened_1_listener() {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext(2);\n      return ctx_r25.panelOpenState = true;\n    })(\"closed\", function ChartSetupComponent_mat_expansion_panel_10_div_9_Template_mat_expansion_panel_closed_1_listener() {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r27 = i0.ɵɵnextContext(2);\n      return ctx_r27.panelOpenState = false;\n    });\n    i0.ɵɵelementStart(2, \"mat-expansion-panel-header\");\n    i0.ɵɵelementStart(3, \"div\", 17);\n    i0.ɵɵelementStart(4, \"div\");\n    i0.ɵɵelementStart(5, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function ChartSetupComponent_mat_expansion_panel_10_div_9_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r26);\n      const category_r21 = restoredCtx.$implicit;\n      const ctx_r28 = i0.ɵɵnextContext(2);\n      return ctx_r28.DeleteCategory(category_r21);\n    });\n    i0.ɵɵelementStart(6, \"mat-icon\");\n    i0.ɵɵtext(7, \"delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"mat-selection-list\", 19, 20);\n    i0.ɵɵlistener(\"ngModelChange\", function ChartSetupComponent_mat_expansion_panel_10_div_9_Template_mat_selection_list_ngModelChange_10_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r29 = i0.ɵɵnextContext(2);\n      return ctx_r29.updatedCategoryOption = $event;\n    })(\"ngModelChange\", function ChartSetupComponent_mat_expansion_panel_10_div_9_Template_mat_selection_list_ngModelChange_10_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r26);\n      const category_r21 = restoredCtx.$implicit;\n      const ctx_r30 = i0.ɵɵnextContext(2);\n      return ctx_r30.UpdateField($event, category_r21, \"category\");\n    });\n    i0.ɵɵtemplate(12, ChartSetupComponent_mat_expansion_panel_10_div_9_mat_list_option_12_Template, 2, 2, \"mat-list-option\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const category_r21 = ctx.$implicit;\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate1(\" Category: \", category_r21.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r18.updatedCategoryOption)(\"multiple\", false)(\"ngModelOptions\", i0.ɵɵpureFunction0(5, _c0));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r18.categoryNames);\n  }\n}\n\nfunction ChartSetupComponent_mat_expansion_panel_10_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r33 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function ChartSetupComponent_mat_expansion_panel_10_div_12_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r33);\n      const item_r31 = restoredCtx.$implicit;\n      const ctx_r32 = i0.ɵɵnextContext(2);\n      return ctx_r32.AddData(item_r31, \"category\");\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"playlist_add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r31 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", item_r31, \" \");\n  }\n}\n\nfunction ChartSetupComponent_mat_expansion_panel_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r35 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-expansion-panel\", 3);\n    i0.ɵɵlistener(\"opened\", function ChartSetupComponent_mat_expansion_panel_10_Template_mat_expansion_panel_opened_0_listener() {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r34 = i0.ɵɵnextContext();\n      return ctx_r34.panelOpenState = true;\n    })(\"closed\", function ChartSetupComponent_mat_expansion_panel_10_Template_mat_expansion_panel_closed_0_listener() {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r36 = i0.ɵɵnextContext();\n      return ctx_r36.panelOpenState = false;\n    });\n    i0.ɵɵelementStart(1, \"mat-expansion-panel-header\");\n    i0.ɵɵelementStart(2, \"mat-panel-title\");\n    i0.ɵɵtext(3, \" X Axis \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 15);\n    i0.ɵɵelementStart(5, \"button\", 9);\n    i0.ɵɵelementStart(6, \"mat-icon\");\n    i0.ɵɵtext(7, \"add_circle\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \" Category \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, ChartSetupComponent_mat_expansion_panel_10_div_9_Template, 13, 6, \"div\", 7);\n    i0.ɵɵelementStart(10, \"mat-menu\", null, 16);\n    i0.ɵɵtemplate(12, ChartSetupComponent_mat_expansion_panel_10_div_12_Template, 5, 1, \"div\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r19 = i0.ɵɵreference(11);\n\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"matMenuTriggerFor\", _r19);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.availableCategoryNames);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.categoryNames);\n  }\n}\n\nfunction ChartSetupComponent_div_19_mat_list_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r40 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r40);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r40, \" \");\n  }\n}\n\nfunction ChartSetupComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r42 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"mat-expansion-panel\", 3);\n    i0.ɵɵlistener(\"opened\", function ChartSetupComponent_div_19_Template_mat_expansion_panel_opened_1_listener() {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r41 = i0.ɵɵnextContext();\n      return ctx_r41.panelOpenState = true;\n    })(\"closed\", function ChartSetupComponent_div_19_Template_mat_expansion_panel_closed_1_listener() {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r43 = i0.ɵɵnextContext();\n      return ctx_r43.panelOpenState = false;\n    });\n    i0.ɵɵelementStart(2, \"mat-expansion-panel-header\");\n    i0.ɵɵelementStart(3, \"div\", 17);\n    i0.ɵɵelementStart(4, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function ChartSetupComponent_div_19_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r42);\n      const series_r37 = restoredCtx.$implicit;\n      const ctx_r44 = i0.ɵɵnextContext();\n      return ctx_r44.DeleteSeries(series_r37);\n    });\n    i0.ɵɵelementStart(5, \"mat-icon\");\n    i0.ɵɵtext(6, \"delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"mat-selection-list\", 19, 24);\n    i0.ɵɵlistener(\"ngModelChange\", function ChartSetupComponent_div_19_Template_mat_selection_list_ngModelChange_9_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r45 = i0.ɵɵnextContext();\n      return ctx_r45.updatedSeriesOption = $event;\n    })(\"ngModelChange\", function ChartSetupComponent_div_19_Template_mat_selection_list_ngModelChange_9_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r42);\n      const series_r37 = restoredCtx.$implicit;\n      const ctx_r46 = i0.ɵɵnextContext();\n      return ctx_r46.UpdateField($event, series_r37, \"series\");\n    });\n    i0.ɵɵtemplate(11, ChartSetupComponent_div_19_mat_list_option_11_Template, 2, 2, \"mat-list-option\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r37 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵtextInterpolate1(\" Series : \", series_r37.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r4.updatedSeriesOption)(\"multiple\", false)(\"ngModelOptions\", i0.ɵɵpureFunction0(5, _c0));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.seriesNames);\n  }\n}\n\nfunction ChartSetupComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r49 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function ChartSetupComponent_div_22_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r49);\n      const item_r47 = restoredCtx.$implicit;\n      const ctx_r48 = i0.ɵɵnextContext();\n      return ctx_r48.AddData(item_r47, \"series\");\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"playlist_add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r47 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", item_r47, \" \");\n  }\n}\n\nfunction ChartSetupComponent_div_31_mat_expansion_panel_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r53 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-expansion-panel\", 3);\n    i0.ɵɵlistener(\"opened\", function ChartSetupComponent_div_31_mat_expansion_panel_1_Template_mat_expansion_panel_opened_0_listener() {\n      i0.ɵɵrestoreView(_r53);\n      const ctx_r52 = i0.ɵɵnextContext(2);\n      return ctx_r52.panelOpenState = true;\n    })(\"closed\", function ChartSetupComponent_div_31_mat_expansion_panel_1_Template_mat_expansion_panel_closed_0_listener() {\n      i0.ɵɵrestoreView(_r53);\n      const ctx_r54 = i0.ɵɵnextContext(2);\n      return ctx_r54.panelOpenState = false;\n    });\n    i0.ɵɵelementStart(1, \"mat-expansion-panel-header\");\n    i0.ɵɵelementStart(2, \"mat-panel-title\", 25);\n    i0.ɵɵelementStart(3, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function ChartSetupComponent_div_31_mat_expansion_panel_1_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r53);\n      const label_r50 = i0.ɵɵnextContext().$implicit;\n      const ctx_r55 = i0.ɵɵnextContext();\n      return ctx_r55.DeleteLabel(label_r50);\n    });\n    i0.ɵɵelementStart(4, \"mat-icon\");\n    i0.ɵɵtext(5, \"delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const label_r50 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\" Label : \", label_r50, \" \");\n  }\n}\n\nfunction ChartSetupComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, ChartSetupComponent_div_31_mat_expansion_panel_1_Template, 7, 1, \"mat-expansion-panel\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7._chartSetupData && ctx_r7._chartSetupData.labels);\n  }\n}\n\nfunction ChartSetupComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r60 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function ChartSetupComponent_div_34_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r60);\n      const item_r58 = restoredCtx.$implicit;\n      const ctx_r59 = i0.ɵɵnextContext();\n      return ctx_r59.AddData(item_r58, \"label\");\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"playlist_add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r58 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", item_r58, \" \");\n  }\n}\n\nfunction ChartCustomizerComponent_mat_accordion_0_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"label\", 4);\n    i0.ɵɵtext(2, \"Chart Height:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"mat-slider\", 5, 6);\n    i0.ɵɵlistener(\"valueChange\", function ChartCustomizerComponent_mat_accordion_0_div_6_Template_mat_slider_valueChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7._chartData.chart.height = $event;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r6 = i0.ɵɵreference(4);\n\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"value\", ctx_r1._chartData.chart.height);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(_r6.value);\n  }\n}\n\nfunction ChartCustomizerComponent_mat_accordion_0_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"label\", 7);\n    i0.ɵɵtext(2, \"Chart Width:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"mat-slider\", 8, 9);\n    i0.ɵɵlistener(\"valueChange\", function ChartCustomizerComponent_mat_accordion_0_div_7_Template_mat_slider_valueChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10._chartData.chart.width = $event;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"value\", ctx_r2._chartData.chart.width);\n  }\n}\n\nfunction ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_8_mat_checkbox_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-checkbox\", 12);\n    i0.ɵɵtext(1, \"x-Axis\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_8_mat_checkbox_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-checkbox\", 13);\n    i0.ɵɵtext(1, \"y-Axis\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-expansion-panel\", 2);\n    i0.ɵɵlistener(\"opened\", function ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_8_Template_mat_expansion_panel_opened_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.panelOpenState = true;\n    })(\"closed\", function ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_8_Template_mat_expansion_panel_closed_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.panelOpenState = false;\n    });\n    i0.ɵɵelementStart(1, \"mat-expansion-panel-header\");\n    i0.ɵɵelementStart(2, \"mat-panel-title\");\n    i0.ɵɵtext(3, \" Grid \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_8_mat_checkbox_4_Template, 2, 0, \"mat-checkbox\", 10);\n    i0.ɵɵtext(5, \"\\xA0 \");\n    i0.ɵɵtemplate(6, ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_8_mat_checkbox_6_Template, 2, 0, \"mat-checkbox\", 11);\n    i0.ɵɵtext(7, \"\\xA0 \");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3._chartData.grid.xaxis);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3._chartData.grid.yaxis);\n  }\n}\n\nfunction ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-expansion-panel\", 2);\n    i0.ɵɵlistener(\"opened\", function ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_9_Template_mat_expansion_panel_opened_0_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return ctx_r17.panelOpenState = true;\n    })(\"closed\", function ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_9_Template_mat_expansion_panel_closed_0_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.panelOpenState = false;\n    });\n    i0.ɵɵelementStart(1, \"mat-expansion-panel-header\");\n    i0.ɵɵelementStart(2, \"mat-panel-title\");\n    i0.ɵɵtext(3, \" Data Labels \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-checkbox\", 14);\n    i0.ɵɵtext(5, \"Display\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-expansion-panel\", 2);\n    i0.ɵɵlistener(\"opened\", function ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_10_Template_mat_expansion_panel_opened_0_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return ctx_r20.panelOpenState = true;\n    })(\"closed\", function ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_10_Template_mat_expansion_panel_closed_0_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return ctx_r22.panelOpenState = false;\n    });\n    i0.ɵɵelementStart(1, \"mat-expansion-panel-header\");\n    i0.ɵɵelementStart(2, \"mat-panel-title\");\n    i0.ɵɵtext(3, \" Stroke \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-checkbox\", 15);\n    i0.ɵɵtext(5, \"Display stroke\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"br\");\n    i0.ɵɵelementStart(7, \"label\", 16);\n    i0.ɵɵtext(8, \"Stroke Width\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"mat-slider\", 17);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChartCustomizerComponent_mat_accordion_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-accordion\");\n    i0.ɵɵelementStart(1, \"form\", 1);\n    i0.ɵɵelementStart(2, \"mat-expansion-panel\", 2);\n    i0.ɵɵlistener(\"opened\", function ChartCustomizerComponent_mat_accordion_0_Template_mat_expansion_panel_opened_2_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.panelOpenState = true;\n    })(\"closed\", function ChartCustomizerComponent_mat_accordion_0_Template_mat_expansion_panel_closed_2_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.panelOpenState = false;\n    });\n    i0.ɵɵelementStart(3, \"mat-expansion-panel-header\");\n    i0.ɵɵelementStart(4, \"mat-panel-title\");\n    i0.ɵɵtext(5, \" Chart Style \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, ChartCustomizerComponent_mat_accordion_0_div_6_Template, 7, 2, \"div\", 0);\n    i0.ɵɵtemplate(7, ChartCustomizerComponent_mat_accordion_0_div_7_Template, 5, 1, \"div\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_8_Template, 8, 2, \"mat-expansion-panel\", 3);\n    i0.ɵɵtemplate(9, ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_9_Template, 6, 0, \"mat-expansion-panel\", 3);\n    i0.ɵɵtemplate(10, ChartCustomizerComponent_mat_accordion_0_mat_expansion_panel_10_Template, 10, 0, \"mat-expansion-panel\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.ChartOptionsForm);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._chartData.chart.height);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0._chartData.chart.height);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._chartData.grid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._chartData.dataLabels);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._chartData.stroke);\n  }\n}\n\nconst _c1 = [\"chartObj\"];\nconst _c2 = \".container[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:100%}.container[_ngcontent-%COMP%] > apx-chart[_ngcontent-%COMP%]{flex:1}.chart-heading[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:flex-end}\";\n\nfunction ChartsContainerComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function ChartsContainerComponent_div_2_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const chartTypeItem_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.AddChart(chartTypeItem_r3.name);\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const chartTypeItem_r3 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(chartTypeItem_r3.icon);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(chartTypeItem_r3.name);\n  }\n}\n\nfunction ChartsContainerComponent_gridster_item_14_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-bar-graph\", 14);\n    i0.ɵɵlistener(\"chartId\", function ChartsContainerComponent_gridster_item_14_ng_template_1_Template_app_bar_graph_chartId_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const item_r6 = i0.ɵɵnextContext().$implicit;\n      return item_r6.chartID = $event;\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"barGraphData\", item_r6.chartData);\n  }\n}\n\nfunction ChartsContainerComponent_gridster_item_14_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-pie-chart\", 15);\n    i0.ɵɵlistener(\"chartId\", function ChartsContainerComponent_gridster_item_14_ng_template_2_Template_app_pie_chart_chartId_0_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const item_r6 = i0.ɵɵnextContext().$implicit;\n      return item_r6.chartID = $event;\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"pieChartData\", item_r6.chartData);\n  }\n}\n\nfunction ChartsContainerComponent_gridster_item_14_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-kpi\", 16);\n  }\n\n  if (rf & 2) {\n    const item_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"kpiData\", item_r6.chartData);\n  }\n}\n\nfunction ChartsContainerComponent_gridster_item_14_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-line-chart\", 17);\n    i0.ɵɵlistener(\"chartId\", function ChartsContainerComponent_gridster_item_14_ng_template_4_Template_app_line_chart_chartId_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const item_r6 = i0.ɵɵnextContext().$implicit;\n      return item_r6.chartID = $event;\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"lineChartData\", item_r6.chartData);\n  }\n}\n\nfunction ChartsContainerComponent_gridster_item_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"gridster-item\", 12);\n    i0.ɵɵtemplate(1, ChartsContainerComponent_gridster_item_14_ng_template_1_Template, 1, 1, \"ng-template\", 13);\n    i0.ɵɵtemplate(2, ChartsContainerComponent_gridster_item_14_ng_template_2_Template, 1, 1, \"ng-template\", 13);\n    i0.ɵɵtemplate(3, ChartsContainerComponent_gridster_item_14_ng_template_3_Template, 1, 1, \"ng-template\", 13);\n    i0.ɵɵtemplate(4, ChartsContainerComponent_gridster_item_14_ng_template_4_Template, 1, 1, \"ng-template\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"item\", item_r6.position);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r6.chartType == \"bar\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r6.chartType == \"pie\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r6.chartType == \"kpi\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r6.chartType == \"line\");\n  }\n}\n\nclass DashxService {\n  constructor() {}\n\n}\n\nDashxService.ɵfac = function DashxService_Factory(t) {\n  return new (t || DashxService)();\n};\n\nDashxService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DashxService,\n  factory: DashxService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DashxService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass DashxComponent {\n  constructor() {}\n\n  ngOnInit() {}\n\n}\n\nDashxComponent.ɵfac = function DashxComponent_Factory(t) {\n  return new (t || DashxComponent)();\n};\n\nDashxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DashxComponent,\n  selectors: [[\"lib-dashx\"]],\n  decls: 2,\n  vars: 0,\n  template: function DashxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \" dashx works! \");\n      i0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DashxComponent, [{\n    type: Component,\n    args: [{\n      selector: 'lib-dashx',\n      template: `\n    <p>\n      dashx works!\n    </p>\n  `,\n      styles: []\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nvar env = {\n  name: \"DEV\"\n};\nvar variables = {\n  demoChartVisible: \"false\"\n};\nvar config_dev = {\n  env: env,\n  variables: variables\n};\nvar config = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  env: env,\n  variables: variables,\n  'default': config_dev\n});\n\nclass AppConfig {\n  constructor(http) {\n    this.http = http;\n  }\n\n  load() {\n    const jsonFile = 'assets/config/config.dev.json';\n    return new Promise((resolve, reject) => {\n      AppConfig.settings = config;\n      resolve();\n    });\n  }\n\n}\n\nAppConfig.ɵfac = function AppConfig_Factory(t) {\n  return new (t || AppConfig)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAppConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AppConfig,\n  factory: AppConfig.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AppConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }];\n  }, null);\n})();\n\nclass AddDashboardComponent {\n  constructor(dialogRef, data) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n  }\n\n  onCancelClick() {\n    this.dialogRef.close();\n  }\n\n  ngOnInit() {}\n\n}\n\nAddDashboardComponent.ɵfac = function AddDashboardComponent_Factory(t) {\n  return new (t || AddDashboardComponent)(i0.ɵɵdirectiveInject(i1$1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n};\n\nAddDashboardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AddDashboardComponent,\n  selectors: [[\"app-add-dashboard\"]],\n  decls: 16,\n  vars: 3,\n  consts: [[1, \"container\"], [\"mat-dialog-content\", \"\"], [\"appearance\", \"fill\"], [\"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-button\", \"\", \"cdkFocusInitial\", \"\", 3, \"mat-dialog-close\"]],\n  template: function AddDashboardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\");\n      i0.ɵɵelementStart(2, \"div\", 1);\n      i0.ɵɵelementStart(3, \"p\");\n      i0.ɵɵtext(4, \"Title\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"mat-form-field\", 2);\n      i0.ɵɵelementStart(6, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function AddDashboardComponent_Template_input_ngModelChange_6_listener($event) {\n        return ctx.data.title = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"p\");\n      i0.ɵɵtext(8, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"mat-form-field\", 2);\n      i0.ɵɵelementStart(10, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function AddDashboardComponent_Template_input_ngModelChange_10_listener($event) {\n        return ctx.data.description = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 4);\n      i0.ɵɵelementStart(12, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function AddDashboardComponent_Template_button_click_12_listener() {\n        return ctx.onCancelClick();\n      });\n      i0.ɵɵtext(13, \"Cancel\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"button\", 6);\n      i0.ɵɵtext(15, \"Save\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.data.title);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.data.description);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"mat-dialog-close\", ctx.data);\n    }\n  },\n  directives: [i1$1.MatDialogContent, i4.MatFormField, i4$1.MatInput, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i1$1.MatDialogActions, i3.MatButton, i1$1.MatDialogClose],\n  styles: [\".container[_ngcontent-%COMP%]{width:500px;margin:10px}.mat-form-field[_ngcontent-%COMP%]{width:100%}.mat-button[_ngcontent-%COMP%]{right:-350px}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AddDashboardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-add-dashboard',\n      templateUrl: './add-dashboard.component.html',\n      styleUrls: ['./add-dashboard.component.css']\n    }]\n  }], function () {\n    return [{\n      type: i1$1.MatDialogRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DIALOG_DATA]\n      }]\n    }];\n  }, null);\n})();\n\nclass DashboardService {\n  constructor() {\n    //#region dummy chart data\n    this.barChartDummyData = {\n      series: [{\n        name: \"basic\",\n        data: [400, 430, 448, 470, 540, 580, 690, 1100, 1200, 1380]\n      }],\n      xaxis: {\n        categories: [\"South Korea\", \"Canada\", \"United Kingdom\", \"Netherlands\", \"Italy\", \"France\", \"Japan\", \"United States\", \"China\", \"Germany\"]\n      }\n    };\n    this.kpiDummyData = {\n      name: \"Quaterly Revenue\",\n      metric: \"200\",\n      icon: \"show_chart\"\n    };\n    this.pieChartDummyData = {\n      labels: ['Team A', 'Team B', 'Team C', 'Team D', 'Team E'],\n      series: [44, 55, 13, 43, 22]\n    };\n    this.lineChartDummyData = {\n      series: [{\n        name: \"Desktops\",\n        data: [10, 41, 35, 51, 49, 62, 69, 91, 148]\n      }],\n      xaxis: {\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep']\n      }\n    };\n    this.dashboardDummyData = {\n      title: 'Inventory',\n      description: 'Inventory sold'\n    }; //#endregion\n    //#region dummy chart position data\n\n    this.demoPieChartPosition = {\n      rows: 21,\n      cols: 52,\n      x: 0,\n      y: 0\n    };\n    this.demoLineChartPosition = {\n      rows: 21,\n      cols: 52,\n      x: 0,\n      y: 0\n    };\n    this.demoBarChartPosition = {\n      rows: 21,\n      cols: 52,\n      x: 0,\n      y: 0\n    };\n    this.demoKPIPosition = {\n      rows: 11,\n      cols: 36,\n      x: 0,\n      y: 0\n    }; //#endregion\n\n    this.demoDashboardPosition = {\n      rows: 21,\n      cols: 52,\n      x: 0,\n      y: 0\n    };\n  }\n\n  loadPieChartData() {\n    return {\n      series: [44, 55, 13, 43, 22],\n      labels: [\"Team A\", \"Team B\", \"Team C\", \"Team D\", \"Team E\"]\n    };\n  }\n\n  loadLineChartData() {\n    return {\n      series: [{\n        name: \"Desktops\",\n        data: [10, 41, 35, 51, 49, 62, 69, 91, 148]\n      }],\n      xaxis: {\n        categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\"]\n      }\n    };\n  }\n\n  loadBarGraphData() {\n    return {\n      series: [{\n        name: \"basic\",\n        data: [400, 430, 448, 470, 540, 580, 690, 1100, 1200, 1380]\n      }],\n      xaxis: {\n        categories: [\"South Korea\", \"Canada\", \"United Kingdom\", \"Netherlands\", \"Italy\", \"France\", \"Japan\", \"United States\", \"China\", \"Germany\"]\n      }\n    };\n  }\n\n  loadDashboardData() {\n    return {\n      id: \"100\",\n      data: {\n        title: \"jojo\",\n        description: \"awsm charts\"\n      },\n      color: \"red\",\n      position: {\n        rows: 0,\n        cols: 0,\n        x: 0,\n        y: 0\n      },\n      charts: [{\n        chartType: \"line\",\n        chartID: 0,\n        position: {\n          cols: 80,\n          rows: 45,\n          x: 2,\n          y: 3\n        },\n        chartData: this.lineChartDummyData\n      }]\n    };\n  }\n\n  GetDefaultBarChartObject() {\n    return {\n      chartData: this.barChartDummyData,\n      chartID: 0,\n      chartType: 'bar',\n      position: this.demoBarChartPosition\n    };\n  }\n\n  GetDefaultLineChartObject() {\n    return {\n      chartData: this.lineChartDummyData,\n      chartID: 0,\n      chartType: 'line',\n      position: this.demoLineChartPosition\n    };\n  }\n\n  GetDefaultPieChartObject() {\n    return {\n      chartData: this.pieChartDummyData,\n      chartID: 0,\n      chartType: 'pie',\n      position: this.demoPieChartPosition\n    };\n  }\n\n  GetDefaultKpiChartObject() {\n    return {\n      chartData: this.kpiDummyData,\n      chartID: 0,\n      chartType: 'kpi',\n      position: this.demoKPIPosition\n    };\n  }\n\n  GetDefaultChartObject() {\n    console.log(this.dashboardDummyData);\n    return {\n      chartData: this.dashboardDummyData,\n      chartID: 0,\n      chartType: 'Dashboard',\n      position: this.demoDashboardPosition\n    };\n  }\n\n  GetListOfChartTypes() {\n    return [{\n      name: \"Kpi\",\n      icon: \"vpn_key\"\n    }, {\n      name: \"Pie\",\n      icon: \"pie_chart\"\n    }, {\n      name: \"Bar\",\n      icon: \"bar_chart\"\n    }, {\n      name: \"Line\",\n      icon: \"show_chart\"\n    }];\n  }\n\n  SaveDashboardData(dashboardData) {\n    console.log('////saving data////', dashboardData);\n  }\n\n}\n\nDashboardService.ɵfac = function DashboardService_Factory(t) {\n  return new (t || DashboardService)();\n};\n\nDashboardService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DashboardService,\n  factory: DashboardService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DashboardService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass ChartEditorService {\n  constructor() {\n    this.isEditorOpen = new BehaviorSubject([false, '']);\n    this.isEditorOpen_current = this.isEditorOpen.asObservable();\n    this.editorData = new BehaviorSubject(null);\n    this.editorData_current = this.editorData.asObservable();\n  }\n\n  ToggleEditor(isEditorOpen, chartID) {\n    this.isEditorOpen.next([isEditorOpen, chartID]);\n  }\n  /**\r\n   * (observed function) contains the entire chart data\r\n   * @param editorData includes the entire chart data\r\n   */\n\n\n  EditorDataUpdated(editorData) {\n    this.editorData.next(editorData);\n  }\n  /**\r\n   * to generate unique ids for graphs\r\n   * @returns unique id\r\n   */\n\n\n  UID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16 | 0,\n          v = c == 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n  }\n\n}\n\nChartEditorService.ɵfac = function ChartEditorService_Factory(t) {\n  return new (t || ChartEditorService)();\n};\n\nChartEditorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ChartEditorService,\n  factory: ChartEditorService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartEditorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass CreateDashboardComponent {\n  constructor(_router) {\n    this._router = _router;\n    this.dashboardList = [{\n      content: \"Sales\",\n      description: \"Description\",\n      color: \"blue\"\n    }];\n  }\n\n  ngOnInit() {}\n\n  OpenDashboard() {\n    this._router.navigateByUrl('/dashboard/current');\n  }\n\n}\n\nCreateDashboardComponent.ɵfac = function CreateDashboardComponent_Factory(t) {\n  return new (t || CreateDashboardComponent)(i0.ɵɵdirectiveInject(i1$2.Router));\n};\n\nCreateDashboardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CreateDashboardComponent,\n  selectors: [[\"app-create-dashboard\"]],\n  decls: 11,\n  vars: 1,\n  consts: [[1, \"dashboard-container\"], [1, \"container\"], [1, \"dashboard-heading\"], [\"mat-icon-button\", \"\", \"id\", \"edit-icon\", 2, \"color\", \"gray\"], [\"cols\", \"3\", \"rowHeight\", \"2:1\", 1, \"dashboard\"], [\"style\", \"height: 100%;\", 4, \"ngFor\", \"ngForOf\"], [2, \"height\", \"100%\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"dashboard-button\", 3, \"click\"], [1, \"dashboard-title\"], [1, \"dashboard-description\"]],\n  template: function CreateDashboardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"button\", 3);\n      i0.ɵɵelementStart(4, \"mat-icon\");\n      i0.ɵɵtext(5, \"delete\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 3);\n      i0.ɵɵelementStart(7, \"mat-icon\");\n      i0.ɵɵtext(8, \"more_vert\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"mat-grid-list\", 4);\n      i0.ɵɵtemplate(10, CreateDashboardComponent_div_10_Template, 6, 2, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngForOf\", ctx.dashboardList);\n    }\n  },\n  directives: [i3.MatButton, i4$2.MatIcon, i4$3.MatGridList, i10.NgForOf],\n  styles: [\".container[_ngcontent-%COMP%]{height:100%}.dashboard[_ngcontent-%COMP%]{display:grid;grid-template-columns:auto;height:100%}.dashboard-container[_ngcontent-%COMP%]{height:100%}.no-display[_ngcontent-%COMP%]{display:none}.top-toolbar[_ngcontent-%COMP%]{position:sticky;top:0;z-index:21}.mat-grid-tile[_ngcontent-%COMP%]   .mat-figure[_ngcontent-%COMP%]{top:0;left:0;right:0;bottom:0;position:absolute;display:block!important;align-items:flex-start;justify-content:flex-start;height:100%;width:100%;padding:0;margin:0}#addChartIcon[_ngcontent-%COMP%]{transform:scale(2)}.edit-toolbar-options[_ngcontent-%COMP%]{justify-content:flex-end}[_ngcontent-%COMP%]:hover   .test-class[_ngcontent-%COMP%]{background-color:#0ff}.dashboard-title[_ngcontent-%COMP%]{font-size:30px}.mat-grid-tile[_ngcontent-%COMP%]   .mat-figure[_ngcontent-%COMP%]{top:0;left:0;right:0;bottom:0;position:absolute;display:block!important;align-items:flex-start;justify-content:flex-start;height:100%;width:100%;padding:0;margin:0;font-weight:bold}.icon_large[_ngcontent-%COMP%]{transform:scale(3)}.dashboard-description[_ngcontent-%COMP%]{font-weight:lighter;font-size:18px;bottom:0}.dashboard-heading[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:flex-end;background-color:#fff}.dashboard-button[_ngcontent-%COMP%]{width:100%;height:100%}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CreateDashboardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-create-dashboard',\n      templateUrl: './create-dashboard.component.html',\n      styleUrls: ['./create-dashboard.component.css']\n    }]\n  }], function () {\n    return [{\n      type: i1$2.Router\n    }];\n  }, null);\n})();\n\nclass DashboardContainerComponent {\n  constructor(_router, dashboardService, dialog) {\n    this._router = _router;\n    this.dashboardService = dashboardService;\n    this.dialog = dialog;\n    this.dashboardList = [{\n      content: \"Sales\",\n      description: \"Description\",\n      color: \"blue\",\n      position: {\n        rows: 3,\n        cols: 3,\n        x: 0,\n        y: 0\n      }\n    }];\n    this._dashboard = dashboardService.loadDashboardData(); //toggle demo charts\n\n    if (AppConfig.settings.variables.demoChartVisible) {\n      this._dashboard.charts = [];\n    }\n  }\n\n  ngOnInit() {\n    //#region gridster init\n    this.options = {\n      gridType: GridType.Fit,\n      compactType: CompactType.None,\n      margin: 10,\n      outerMargin: true,\n      outerMarginTop: null,\n      outerMarginRight: null,\n      outerMarginBottom: null,\n      outerMarginLeft: null,\n      useTransformPositioning: true,\n      mobileBreakpoint: 640,\n      minCols: 10,\n      maxCols: 25,\n      minRows: 8,\n      maxRows: 25,\n      maxItemCols: 500,\n      minItemCols: 1,\n      maxItemRows: 500,\n      minItemRows: 1,\n      maxItemArea: 200,\n      minItemArea: 1,\n      defaultItemCols: 1,\n      defaultItemRows: 1,\n      fixedColWidth: 50,\n      fixedRowHeight: 50,\n      keepFixedHeightInMobile: false,\n      keepFixedWidthInMobile: false,\n      scrollSensitivity: 10,\n      scrollSpeed: 20,\n      enableEmptyCellClick: false,\n      enableEmptyCellContextMenu: false,\n      enableEmptyCellDrop: false,\n      enableEmptyCellDrag: false,\n      enableOccupiedCellDrop: false,\n      emptyCellDragMaxCols: 50,\n      emptyCellDragMaxRows: 50,\n      ignoreMarginInRow: false,\n      draggable: {\n        enabled: true\n      },\n      resizable: {\n        enabled: true\n      },\n      swap: false,\n      pushItems: true,\n      disablePushOnDrag: false,\n      disablePushOnResize: false,\n      pushDirections: {\n        north: false,\n        east: false,\n        south: false,\n        west: false\n      },\n      pushResizeItems: false,\n      displayGrid: DisplayGrid.None,\n      disableWindowResize: false,\n      disableWarnings: false,\n      scrollToNewItems: false,\n      itemChangeCallback: DashboardContainerComponent.itemChange,\n      itemResizeCallback: DashboardContainerComponent.itemResize\n    };\n  } //#region gridster static methods \n\n\n  static itemChange(item, itemComponent) {\n    console.info('itemChanged', item, itemComponent);\n  }\n\n  static itemResize(item, itemComponent) {\n    console.info('itemResized', item, itemComponent);\n  } //#region gridster methods\n\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({\n      x: 0,\n      y: 0,\n      cols: 1,\n      rows: 1\n    });\n  }\n\n  openCreateDashboardDialog() {}\n\n  AddDashboard() {\n    this._dashboard.charts.push(this.dashboardService.GetDefaultChartObject());\n\n    console.log('service called');\n  }\n\n  SaveDashboardContainer() {\n    /**\r\n     * creates dashboard object\r\n     * returns the object to be saved\r\n     */\n  }\n\n  openDialog() {\n    const dialogRef = this.dialog.open(AddDashboardComponent, {\n      data: {\n        title: this.title,\n        description: this.description\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed', result);\n      this.title = result.title;\n      this.description = result.description;\n      this.AddDashboard();\n    });\n  }\n\n}\n\nDashboardContainerComponent.ɵfac = function DashboardContainerComponent_Factory(t) {\n  return new (t || DashboardContainerComponent)(i0.ɵɵdirectiveInject(i1$2.Router), i0.ɵɵdirectiveInject(DashboardService), i0.ɵɵdirectiveInject(i1$1.MatDialog));\n};\n\nDashboardContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DashboardContainerComponent,\n  selectors: [[\"app-dashboard-container\"]],\n  decls: 9,\n  vars: 2,\n  consts: [[1, \"top-toolbar\"], [\"color\", \"basic\", 1, \"edit-toolbar-options\"], [\"mat-button\", \"\", \"color\", \"primary\", 3, \"click\"], [1, \"dashboard-container\"], [1, \"gridster-grid\"], [2, \"background-color\", \"rgb(227, 228, 228)\", 3, \"options\"], [\"class\", \"gridster-item\", 3, \"item\", 4, \"ngFor\", \"ngForOf\"], [1, \"gridster-item\", 3, \"item\"], [1, \"dashboard-item\"]],\n  template: function DashboardContainerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"mat-toolbar\", 1);\n      i0.ɵɵelementStart(2, \"div\");\n      i0.ɵɵelementStart(3, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function DashboardContainerComponent_Template_button_click_3_listener() {\n        return ctx.openDialog();\n      });\n      i0.ɵɵtext(4, \" Add Dashboard \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 3);\n      i0.ɵɵelementStart(6, \"div\", 4);\n      i0.ɵɵelementStart(7, \"gridster\", 5);\n      i0.ɵɵtemplate(8, DashboardContainerComponent_gridster_item_8_Template, 2, 1, \"gridster-item\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"options\", ctx.options);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.dashboardList);\n    }\n  },\n  directives: [i4$4.MatToolbar, i3.MatButton, i6.GridsterComponent, i10.NgForOf, i6.GridsterItemComponent, CreateDashboardComponent],\n  styles: [\".dashboard-container[_ngcontent-%COMP%]{display:grid;grid-template-columns:auto;height:100%;background-color:#fff}.gridster-grid[_ngcontent-%COMP%]{height:90vh}.no-display[_ngcontent-%COMP%]{display:none}.top-toolbar[_ngcontent-%COMP%]{position:sticky;top:0;z-index:21}.mat-grid-tile[_ngcontent-%COMP%]   .mat-figure[_ngcontent-%COMP%]{top:0;left:0;right:0;bottom:0;position:absolute;display:block!important;align-items:flex-start;justify-content:flex-start;height:100%;width:100%;padding:0;margin:0}#addChartIcon[_ngcontent-%COMP%]{transform:scale(2)}.edit-toolbar-options[_ngcontent-%COMP%]{justify-content:flex-end}[_ngcontent-%COMP%]:hover   .test-class[_ngcontent-%COMP%]{background-color:#0ff}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DashboardContainerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-dashboard-container',\n      templateUrl: './dashboard-container.component.html',\n      styleUrls: ['./dashboard-container.component.css']\n    }]\n  }], function () {\n    return [{\n      type: i1$2.Router\n    }, {\n      type: DashboardService\n    }, {\n      type: i1$1.MatDialog\n    }];\n  }, null);\n})();\n\nclass NewChartTabDirective {\n  constructor(viewContainerRef) {\n    this.viewContainerRef = viewContainerRef;\n  }\n\n}\n\nNewChartTabDirective.ɵfac = function NewChartTabDirective_Factory(t) {\n  return new (t || NewChartTabDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n};\n\nNewChartTabDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NewChartTabDirective,\n  selectors: [[\"\", \"newChartTab\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NewChartTabDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[newChartTab]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }];\n  }, null);\n})();\n\nclass ChartContainerService {\n  constructor() {}\n\n  DeleteSelectedChart(DeleteChartFunction) {\n    this.DeleteChart = DeleteChartFunction;\n  }\n\n}\n\nChartContainerService.ɵfac = function ChartContainerService_Factory(t) {\n  return new (t || ChartContainerService)();\n};\n\nChartContainerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ChartContainerService,\n  factory: ChartContainerService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartContainerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})(); //this abstract class should be inherited by all the chart classes\n\n\nclass BaseChart {\n  //#endregion\n  // ctor\n  constructor() {}\n\n  get chartType() {\n    return this._chartType;\n  }\n\n  set chartType(v) {\n    this._chartType = v;\n  }\n\n  get chartId() {\n    return this._chartId;\n  }\n\n  set chartId(v) {\n    this._chartId = v;\n  } // to get the defaults for the chart\n\n\n  GetDefaults() {} // to check if data is complete wrt to the chart being used\n\n\n  DataComplete() {} // to create new series for the data\n\n\n  CreateNewSeries(name, data) {}\n\n  CreateNewSeriesForPieChart(name, data) {}\n\n}\n\nclass BarChart extends BaseChart {\n  constructor(chartId, chartData) {\n    super();\n\n    if (chartId && chartData) {\n      this.chartData = chartData;\n    } else {\n      this.chartData = this.chartData = {\n        series: [],\n        theme: {\n          mode: 'light',\n          palette: 'palette4',\n          monochrome: {\n            enabled: false,\n            color: '#C7F464',\n            shadeTo: 'dark',\n            shadeIntensity: 0.65\n          }\n        },\n        title: {\n          text: \"Bar Chart\",\n          align: 'left',\n          margin: 10,\n          offsetX: 0,\n          offsetY: 0,\n          floating: false,\n          style: {\n            fontSize: '23px',\n            fontWeight: 10,\n            fontFamily: 'Roboto' // color:  '#263238'\n\n          }\n        },\n        chart: {\n          toolbar: {\n            show: false\n          },\n          redrawOnParentResize: true,\n          redrawOnWindowResize: true,\n          type: \"bar\",\n          height: '100%'\n        },\n        plotOptions: {\n          bar: {\n            horizontal: false\n          }\n        },\n        grid: {\n          xaxis: {\n            lines: {\n              show: true\n            }\n          },\n          yaxis: {\n            lines: {\n              show: false\n            }\n          }\n        },\n        stroke: {},\n        dataLabels: {\n          enabled: false\n        },\n        xaxis: {\n          categories: []\n        }\n      };\n    }\n\n    this.chartId = chartId;\n    this.chartType = \"Bar\"; // init series data\n\n    this.seriesData = {\n      name: \"\",\n      data: []\n    };\n  }\n\n  GetDefaults() {\n    return this.chartData;\n  }\n\n  DataComplete() {}\n\n  CreateNewSeries(name, data) {\n    this.seriesData.name = name;\n    this.seriesData.data = data;\n    return this.seriesData;\n  }\n\n} // class for defining the behavior and rules for the given chart type\n\n\nclass PieChart extends BaseChart {\n  constructor(chartId, chartData) {\n    super();\n\n    if (chartId && chartData) {\n      this.chartData = chartData;\n    } else {\n      this.chartData = {\n        title: {\n          text: \"Pie Chart\",\n          align: 'left',\n          margin: 10,\n          offsetX: 0,\n          offsetY: 0,\n          floating: false,\n          style: {\n            fontSize: '23px',\n            fontWeight: 10,\n            fontFamily: 'Roboto',\n            color: '#263238'\n          }\n        },\n        series: [],\n        chart: {\n          height: \"100%\",\n          type: \"pie\",\n          redrawOnParentResize: true\n        },\n        labels: []\n      };\n    }\n\n    this.chartType = \"Pie\";\n    this.chartId = chartId; // unique chart id should be generated for each chart\n\n    this.seriesData = {\n      name: \"\",\n      data: []\n    };\n  }\n\n  GetDefaults() {\n    return this.chartData;\n  }\n\n  DataComplete() {}\n\n  CreateNewSeries(name, data) {\n    this.seriesData.name = name;\n    this.seriesData.data = data;\n    return this.seriesData;\n  }\n\n}\n\nclass LineChart extends BaseChart {\n  constructor(chartId, chartData) {\n    super();\n\n    if (chartId && chartData) {\n      this.chartData = chartData;\n    } else {\n      this.chartData = this.chartData = {\n        series: [],\n        title: {\n          text: \"Line Chart\",\n          align: 'left',\n          margin: 10,\n          offsetX: 0,\n          offsetY: 0,\n          floating: false,\n          style: {\n            fontSize: '23px',\n            fontWeight: 10,\n            fontFamily: 'Roboto',\n            color: '#263238'\n          }\n        },\n        chart: {\n          toolbar: {\n            show: false\n          },\n          height: \"100%\",\n          type: \"line\",\n          redrawOnParentResize: true,\n          redrawOnWindowResize: true,\n          zoom: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: \"straight\"\n        },\n        grid: {\n          row: {\n            colors: [\"#f3f3f3\", \"transparent\"],\n            opacity: 0.5\n          }\n        },\n        xaxis: {\n          categories: []\n        }\n      };\n    }\n\n    this.chartId = chartId;\n    this.chartType = \"Line\";\n  }\n\n  GetDefaults() {\n    return this.chartData;\n  }\n\n} // class for chart setup component\n\n\nclass ChartSetup {\n  //#region properties\n  //#endregion\n  constructor(dataHandler) {\n    this.dataHandler = dataHandler; // init charts to handle different charts\n\n    this.barChart = new BarChart();\n    this.pieChart = new PieChart();\n    this.lineChart = new LineChart();\n  } //#region functions related to series\n  // functionality changes wrt to type of graph should be handled here \n  // to get series available as input for the chart\n\n\n  GetSeriesName() {\n    return this.dataHandler.GetHeaders();\n  } // to get data for a series based on series name \n\n\n  GetSeriesData(chartType, dataType, name) {\n    return this.dataHandler.GetHeaderValue(chartType, dataType, name);\n  } // to create category data used by chart-setup component\n\n\n  CreateCategoryData(categoryName, categoryData) {\n    var category = {\n      name: categoryName,\n      data: categoryData\n    };\n    return category;\n  }\n\n}\n/**\r\n * class for KPI component\r\n */\n\n\nclass KPI {\n  //#endregion\n  constructor(metricName, metricQuantity, metricIcon) {\n    this._metricName = metricName;\n    this._metricQuantity = metricQuantity;\n    this._metricIcon = metricIcon;\n  }\n\n  get metricQuantity() {\n    return this._metricQuantity;\n  }\n\n  get metricName() {\n    return this._metricName;\n  }\n\n  get metricIcon() {\n    return this._metricIcon;\n  }\n\n}\n\nclass DataHandlerService {\n  constructor(http) {\n    this.http = http;\n    this.data = `[\n      {\n        \"Country\": \"Colombia\",\n        \"Id\": 1,\n        \"CreatedOn\": \"12/13/2011\",\n        \"Population\": 50415,\n        \"Metric\" : 60000\n      },\n      {\n        \"Country\": \"Rwanda\",\n        \"Id\": 2,\n        \"CreatedOn\": \"01/18/2011\",\n        \"Population\": 19070,\n        \"Metric\" : 60000\n      },\n      {\n        \"Country\": \"Uganda\",\n        \"Id\": 3,\n        \"CreatedOn\": \"12/27/2003\",\n        \"Population\": 25892,\n        \"Metric\" : 60000\n      },\n      {\n        \"Country\": \"Senegal\",\n        \"Id\": 4,\n        \"CreatedOn\": \"05/23/2022\",\n        \"Population\": 52150,\n        \"Metric\" : 60000\n      },\n      {\n        \"Country\": \"Benin\",\n        \"Id\": 5,\n        \"CreatedOn\": \"06/19/2018\",\n        \"Population\": 86003,\n        \"Metric\" : 60000\n      },\n      {\n        \"Country\": \"Korea, North\",\n        \"Id\": 6,\n        \"CreatedOn\": \"05/21/2021\",\n        \"Population\": 95054,\n        \"Metric\" : 60000\n      },\n      {\n        \"Country\": \"Virgin Islands, British\",\n        \"Id\": 7,\n        \"CreatedOn\": \"04/24/2018\",\n        \"Population\": 36511,\n        \"Metric\" : 60000\n      },\n      {\n        \"Country\": \"Seychelles\",\n        \"Id\": 8,\n        \"CreatedOn\": \"06/21/2007\",\n        \"Population\": 39741,\n        \"Metric\" : 60000\n      },\n      {\n        \"Country\": \"Lebanon\",\n        \"Id\": 9,\n        \"CreatedOn\": \"07/18/2012\",\n        \"Population\": 75397,\n        \"Metric\" : 60000\n      },\n      {\n        \"Country\": \"Swaziland\",\n        \"Id\": 10,\n        \"CreatedOn\": \"10/24/2021\",\n        \"Population\": 74968,\n        \"Metric\" : 60000\n      }\n    ]`;\n    var rowObject;\n    this.http.get('http://localhost:3000/sheetdata/').subscribe(rowData => {\n      rowObject = rowData;\n      this.data_new = rowObject.rows;\n    });\n  }\n\n  GetHeaders_() {\n    var dummyData = JSON.parse(this.data);\n    console.log(Object.keys(dummyData[0]));\n    return Object.keys(dummyData[0]);\n  }\n\n  GetHeaders() {\n    return this.http.get('http://localhost:3000/header/all'); // .subscribe(res => {\n    //   headersObject = res\n    //   if(headersObject != null){\n    //     return headers = headersObject.headers\n    //   }\n    // },error => {\n    //   console.log(error);\n    // })\n  }\n\n  GetHeaderValue(chartType, dataType, keyName) {\n    // var url = 'http://localhost:3000/header/?name=' + keyName;\n    debugger; // return this.http.get(url)\n\n    var values = [];\n    this.data_new.forEach(row => {\n      values.push(row[keyName]);\n    }, this);\n    return values;\n  }\n\n}\n\nDataHandlerService.ɵfac = function DataHandlerService_Factory(t) {\n  return new (t || DataHandlerService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nDataHandlerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DataHandlerService,\n  factory: DataHandlerService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataHandlerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }];\n  }, null);\n})();\n\nclass ChartSetupComponent {\n  //#endregion\n  constructor(chartData, dataHandler) {\n    this.chartData = chartData;\n    this.dataHandler = dataHandler;\n    this.panelOpenState = true;\n    this.updatedSeriesOption = [''];\n    this.updatedCategoryOption = [''];\n    this.chartSetup = new ChartSetup(this.dataHandler);\n  }\n\n  ngOnInit() {\n    this.barChart = new BarChart();\n    this.pieChart = new PieChart();\n    this.lineChart = new LineChart();\n    this.chartData.editorData_current.subscribe(_chartObject => {\n      this.Reset();\n      this.LoadData(_chartObject);\n    });\n    this.Reset();\n    this.chartTypesList = [\"Bar\", \"Line\", \"Pie\"];\n    this.seriesNames = [\"null\"];\n    this.categoryNames = [\"null\"];\n  }\n\n  DeleteSeries(deletedSeries) {\n    this.seriesList = this.seriesList.filter(series => series !== deletedSeries);\n\n    this._chartSetupData.series.pop(deletedSeries);\n\n    this._chartObject.chartData = this._chartSetupData;\n    this.chartData.EditorDataUpdated(this._chartObject);\n  }\n\n  DeleteCategory(deletedCategory) {\n    this.availableCategoryNames = this.availableCategoryNames.filter(category => category !== deletedCategory);\n\n    this._chartSetupData.xaxis.categories.pop(deletedCategory);\n\n    this._chartObject.chartData = this._chartSetupData;\n    this.chartData.EditorDataUpdated(this._chartObject);\n  }\n\n  DeleteLabel(deletedLabel) {\n    this.availableLabelNames = this.availableLabelNames.filter(label => label !== deletedLabel);\n\n    this._chartSetupData.label.pop(deletedLabel);\n\n    this._chartObject.chartData = this._chartSetupData;\n    this.chartData.EditorDataUpdated(this._chartObject);\n  }\n  /**\r\n   * initialize the lists as empty\r\n   */\n\n\n  Reset() {\n    this.seriesList = [];\n    this.categoryList = [];\n    this.labelList = [];\n  } // updates the component UI\n\n\n  UpdateChartSetup() {\n    let headersObject;\n    this.chartSetup.GetSeriesName().subscribe(res => {\n      headersObject = res;\n      this.seriesNames = this.categoryNames = this.availableLabelNames = this.labelNames = headersObject.headers;\n    });\n  }\n\n  EnterSubmit(event, form) {\n    if (event.keyCode == 13) {\n      this._chartObject.Defaults = this._chartSetupData;\n      this.chartData.EditorDataUpdated(this._chartObject);\n    }\n  }\n  /**updates:\r\n   * data lists\r\n   * chart data\r\n   */\n\n\n  ChartInit(chartData) {\n    if (chartData.series) {\n      if (chartData != null) {\n        this.UpdateSeriesList(chartData);\n      }\n    }\n\n    if (chartData.xaxis && chartData.xaxis.categories) {\n      this.availableCategoryNames = [];\n\n      if (chartData.xaxis.categories.length != 0) {\n        var category = this.chartSetup.CreateCategoryData(\"cat-1\", chartData.xaxis.categories);\n        this.availableCategoryNames.push(category);\n      }\n    }\n\n    if (chartData.labels) {\n      this.labelList.push(...chartData.labels);\n    }\n\n    this._chartSetupData = chartData;\n  }\n  /**\r\n   * to set the seriesList (different for different chart types)\r\n   * @param chartData chart data\r\n   */\n\n\n  UpdateSeriesList(chartData) {\n    if (chartData.chart.type.toUpperCase() == this.barChart.chartType.toUpperCase() || chartData.chart.type.toUpperCase() == this.lineChart.chartType.toUpperCase()) {\n      this.seriesList.push(...chartData.series);\n    } else if (chartData.chartType.toUpperCase() == this.pieChart.chartType.toUpperCase()) {\n      let dataToPush = {\n        name: this.addedSeries.name,\n        data: this.addedSeries.data\n      };\n      dataToPush.data = chartData.series; // TODO: Harcoding here, Pie object does not contain series object @pall97\n\n      dataToPush.name = 'Teams';\n      this.seriesList.push(dataToPush);\n    }\n  }\n  /**\r\n   * function to update an orginal field(category/series) with selected one\r\n   * @param updated updated field value\r\n   * @param original original field value\r\n   * @param fieldType type of field value (....can be series, category..)\r\n   */\n\n\n  UpdateField(updated, original, fieldType) {\n    if (fieldType == \"series\" || fieldType == \"category\") {\n      this.DeleteSeries(original);\n      this.AddData(updated, fieldType);\n    } else if (fieldType == \"label\") {}\n  }\n\n  LoadData(chartObject) {\n    //load data from connected DB \n    this.UpdateChartSetup();\n\n    if (chartObject) {\n      if (chartObject.chartType == \"Bar\") {\n        let _barChart = chartObject;\n        let _chartData = _barChart.chartData;\n        this.ChartInit(_chartData);\n      } else if (chartObject.chartType == \"Pie\") {\n        let _pieChart = chartObject;\n        let _chartData = _pieChart.chartData;\n        this.ChartInit(_chartData);\n      } else if (chartObject.chartType == \"Line\") {\n        let _lineChart = chartObject;\n        let _chartData = _lineChart.chartData;\n        this.ChartInit(_chartData);\n      }\n\n      this._chartObject = chartObject;\n    }\n  }\n\n  AddData(dataTypeName, dataType) {\n    /**\r\n     * adds series/category to the ui\r\n     * adds series/category to the chartData object\r\n     */\n    // default case\n    if (dataTypeName == \"null\") {\n      alert(\"need to add data file\");\n    } else {\n      var seriesData = this.chartSetup.GetSeriesData(this._chartObject.chartType, dataType, dataTypeName);\n      this.addedSeries = this.barChart.CreateNewSeries(dataTypeName, seriesData); // to prevent call by reference\n\n      let dataToPush = {\n        name: this.addedSeries.name,\n        data: this.addedSeries.data\n      };\n\n      if (dataType == 'series') {\n        this.seriesList.push(dataToPush);\n\n        this._chartSetupData.series.push(dataToPush);\n\n        if (this._chartObject.chartType == \"Pie\") {\n          this._chartSetupData.series = dataToPush.data;\n          this.seriesList.push(dataToPush);\n        }\n      } else if (dataType == 'category') {\n        this._chartSetupData.xaxis.categories = dataToPush.data;\n        this.categoryList.push(dataToPush); // this.availableCategoryNames.push(dataToPush.name)\n      } else if (dataType == 'label') {\n        this._chartSetupData.labels = dataToPush.data;\n        this.labelList.push(dataToPush);\n        this.availableLabelNames.push(dataToPush.name);\n      }\n    } // update seriesList UI\n    // update setup data\n    // update chart\n\n\n    this._chartObject.chartData = this._chartSetupData;\n    this.chartData.EditorDataUpdated(this._chartObject);\n  }\n\n  SaveChartData() {\n    /**\r\n     * saves chartData to DB\r\n     */\n  }\n\n}\n\nChartSetupComponent.ɵfac = function ChartSetupComponent_Factory(t) {\n  return new (t || ChartSetupComponent)(i0.ɵɵdirectiveInject(ChartEditorService), i0.ɵɵdirectiveInject(DataHandlerService));\n};\n\nChartSetupComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartSetupComponent,\n  selectors: [[\"app-chart-setup\"]],\n  decls: 35,\n  vars: 10,\n  consts: [[3, \"keydown\"], [\"myForm\", \"ngForm\"], [3, \"opened\", \"closed\", 4, \"ngIf\"], [3, \"opened\", \"closed\"], [3, \"multiple\"], [\"aria-label\", \"Select an option\", 4, \"ngFor\", \"ngForOf\"], [\"mat-button\", \"\", 2, \"margin-bottom\", \"10px\", 3, \"matMenuTriggerFor\"], [4, \"ngFor\", \"ngForOf\"], [\"seriesMenu\", \"matMenu\"], [\"mat-button\", \"\", 3, \"matMenuTriggerFor\"], [\"labelMenu\", \"matMenu\"], [\"matInput\", \"\", \"type\", \"text\", 3, \"ngModel\", \"ngModelOptions\", \"ngModelChange\"], [\"mat-button\", \"\", \"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\", 4, \"ngIf\"], [\"mat-button\", \"\", \"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\"], [\"aria-label\", \"Select an option\"], [2, \"margin-bottom\", \"10px\"], [\"menu\", \"matMenu\"], [1, \"label-header\"], [\"mat-icon-button\", \"\", 3, \"click\"], [3, \"ngModel\", \"multiple\", \"ngModelOptions\", \"ngModelChange\"], [\"categorySelectionList\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [\"mat-menu-item\", \"\", 3, \"click\"], [\"seriesSelectionList\", \"\"], [1, \"delete-labels\"], [\"mat-button\", \"\", 3, \"click\"]],\n  template: function ChartSetupComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r61 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵelementStart(0, \"mat-accordion\");\n      i0.ɵɵelementStart(1, \"form\", 0, 1);\n      i0.ɵɵlistener(\"keydown\", function ChartSetupComponent_Template_form_keydown_1_listener($event) {\n        i0.ɵɵrestoreView(_r61);\n\n        const _r0 = i0.ɵɵreference(2);\n\n        return ctx.EnterSubmit($event, _r0.form);\n      });\n      i0.ɵɵtemplate(3, ChartSetupComponent_mat_expansion_panel_3_Template, 7, 4, \"mat-expansion-panel\", 2);\n      i0.ɵɵelementStart(4, \"mat-expansion-panel\", 3);\n      i0.ɵɵlistener(\"opened\", function ChartSetupComponent_Template_mat_expansion_panel_opened_4_listener() {\n        return ctx.panelOpenState = true;\n      })(\"closed\", function ChartSetupComponent_Template_mat_expansion_panel_closed_4_listener() {\n        return ctx.panelOpenState = false;\n      });\n      i0.ɵɵelementStart(5, \"mat-expansion-panel-header\");\n      i0.ɵɵelementStart(6, \"mat-panel-title\");\n      i0.ɵɵtext(7, \" Chart Type \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"mat-selection-list\", 4);\n      i0.ɵɵtemplate(9, ChartSetupComponent_mat_list_option_9_Template, 2, 1, \"mat-list-option\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, ChartSetupComponent_mat_expansion_panel_10_Template, 13, 3, \"mat-expansion-panel\", 2);\n      i0.ɵɵelementStart(11, \"mat-expansion-panel\", 3);\n      i0.ɵɵlistener(\"opened\", function ChartSetupComponent_Template_mat_expansion_panel_opened_11_listener() {\n        return ctx.panelOpenState = true;\n      })(\"closed\", function ChartSetupComponent_Template_mat_expansion_panel_closed_11_listener() {\n        return ctx.panelOpenState = false;\n      });\n      i0.ɵɵelementStart(12, \"mat-expansion-panel-header\");\n      i0.ɵɵelementStart(13, \"mat-panel-title\");\n      i0.ɵɵtext(14, \" Series \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"button\", 6);\n      i0.ɵɵelementStart(16, \"mat-icon\");\n      i0.ɵɵtext(17, \"add_circle\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(18, \" Series \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(19, ChartSetupComponent_div_19_Template, 12, 6, \"div\", 7);\n      i0.ɵɵelementStart(20, \"mat-menu\", null, 8);\n      i0.ɵɵtemplate(22, ChartSetupComponent_div_22_Template, 5, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"mat-expansion-panel\", 3);\n      i0.ɵɵlistener(\"opened\", function ChartSetupComponent_Template_mat_expansion_panel_opened_23_listener() {\n        return ctx.panelOpenState = true;\n      })(\"closed\", function ChartSetupComponent_Template_mat_expansion_panel_closed_23_listener() {\n        return ctx.panelOpenState = false;\n      });\n      i0.ɵɵelementStart(24, \"mat-expansion-panel-header\");\n      i0.ɵɵelementStart(25, \"mat-panel-title\");\n      i0.ɵɵtext(26, \" Labels \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"button\", 9);\n      i0.ɵɵelementStart(28, \"mat-icon\");\n      i0.ɵɵtext(29, \"add_circle\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(30, \" Labels \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(31, ChartSetupComponent_div_31_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementStart(32, \"mat-menu\", null, 10);\n      i0.ɵɵtemplate(34, ChartSetupComponent_div_34_Template, 5, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r5 = i0.ɵɵreference(21);\n\n      const _r8 = i0.ɵɵreference(33);\n\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx._chartSetupData && ctx._chartSetupData.title);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"multiple\", false);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.chartTypesList);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx._chartSetupData && ctx._chartSetupData.xaxis);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"matMenuTriggerFor\", _r5);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.seriesList);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.seriesNames);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"matMenuTriggerFor\", _r8);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.labelList);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.labelNames);\n    }\n  },\n  directives: [i3$1.MatAccordion, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.NgForm, i10.NgIf, i3$1.MatExpansionPanel, i3$1.MatExpansionPanelHeader, i3$1.MatExpansionPanelTitle, i7.MatSelectionList, i10.NgForOf, i3.MatButton, i8.MatMenuTrigger, i4$2.MatIcon, i8.MatMenu, i4.MatFormField, i4$1.MatInput, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i4.MatSuffix, i7.MatListOption, i8.MatMenuItem],\n  styles: [\".mat-radio-button[_ngcontent-%COMP%] ~ .mat-radio-button[_ngcontent-%COMP%]{margin-left:16px}.label-header[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:center}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartSetupComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-chart-setup',\n      templateUrl: './chart-setup.component.html',\n      styleUrls: ['./chart-setup.component.css']\n    }]\n  }], function () {\n    return [{\n      type: ChartEditorService\n    }, {\n      type: DataHandlerService\n    }];\n  }, null);\n})();\n\nclass ChartCustomizerComponent {\n  constructor(chartEditorService, fb) {\n    this.chartEditorService = chartEditorService;\n    this.fb = fb;\n    this.ChartInit();\n    this.ChartOptionsForm = fb.group({\n      showXAxisLines: false,\n      showYAxisLines: false,\n      chartHeight: 0,\n      showDataLabels: false,\n      showStroke: false,\n      strokeWidth: 0,\n      chartWidth: 0\n    });\n  }\n\n  ngOnInit() {\n    this.panelOpenState = false;\n    this.optionsVisible = true;\n    this.chartEditorService.editorData_current.subscribe(chartObject => {\n      if (chartObject) {\n        this._chartObject = chartObject;\n        this._chartData = chartObject.chartData; //update form values\n\n        this.ChartOptionsForm.patchValue(this.CreateChartOptionsFormObject(this._chartObject.chartType), {\n          emitEvent: false\n        });\n      }\n    }); //subscribe to form value change event\n\n    this.OnFormUpdate();\n  }\n\n  CreateChartOptionsFormObject(chartType) {\n    var _a, _b, _c, _d;\n\n    if (chartType.toLowerCase() == 'bar') {\n      return {\n        showXAxisLines: this._chartData.grid.xaxis.lines.show,\n        showYAxisLines: this._chartData.grid.yaxis.lines.show,\n        chartHeight: this._chartData.chart.height,\n        showDataLabels: this._chartData.dataLabels.enabled,\n        showStroke: (_a = this._chartData.stroke.show) !== null && _a !== void 0 ? _a : false,\n        strokeWidth: (_b = this._chartData.stroke.width) !== null && _b !== void 0 ? _b : 0\n      };\n    } else if (chartType.toLowerCase() == 'line') {\n      return {\n        chartHeight: this._chartData.chart.height,\n        showDataLabels: this._chartData.dataLabels.enabled,\n        showStroke: (_c = this._chartData.stroke.show) !== null && _c !== void 0 ? _c : false,\n        strokeWidth: (_d = this._chartData.stroke.width) !== null && _d !== void 0 ? _d : 0\n      };\n    } else if (chartType.toLowerCase() == 'pie') {\n      return {\n        chartWidth: this._chartData.chart.width\n      };\n    }\n  }\n\n  OnFormUpdate() {\n    this.ChartOptionsForm.valueChanges.subscribe(formValues => {\n      //update chart options\n      this.UpdateChartOptions(formValues); //emit chart options\n\n      this._chartObject.chartData = this._chartData;\n      this.chartEditorService.EditorDataUpdated(this._chartObject);\n    });\n  }\n\n  UpdateChartOptions(formValues) {\n    if (this._chartObject.chartType.toLowerCase() == 'bar') {\n      //grid\n      this._chartData.grid.xaxis.lines.show = formValues.showXAxisLines;\n      this._chartData.grid.yaxis.lines.show = formValues.showYAxisLines; //stroke\n\n      this._chartData.stroke.show = formValues.showStroke;\n      this._chartData.stroke.width = formValues.strokeWidth;\n      this._chartData.dataLabels.enabled = formValues.showDataLabels;\n      this._chartData.chart.height = formValues.chartHeight;\n    } else if (this._chartObject.chartType.toLowerCase() == 'line') {\n      this._chartData.stroke.show = formValues.showStroke;\n      this._chartData.stroke.width = formValues.strokeWidth;\n      this._chartData.dataLabels.enabled = formValues.showDataLabels;\n      this._chartData.chart.height = formValues.chartHeight;\n    } else if (this._chartObject.chartType.toLowerCase() == 'pie') {\n      this._chartData.chart.width = formValues.chartWidth;\n    }\n  }\n\n  ChartInit() {\n    this._chartData = {\n      chart: {\n        type: \"bar\",\n        height: \"0\"\n      },\n      grid: {\n        xaxis: {\n          lines: {\n            show: false\n          }\n        },\n        yaxis: {\n          lines: {\n            show: false\n          }\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: false,\n        width: 0\n      }\n    };\n  }\n\n}\n\nChartCustomizerComponent.ɵfac = function ChartCustomizerComponent_Factory(t) {\n  return new (t || ChartCustomizerComponent)(i0.ɵɵdirectiveInject(ChartEditorService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\n\nChartCustomizerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartCustomizerComponent,\n  selectors: [[\"app-chart-customizer\"]],\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [3, \"formGroup\"], [3, \"opened\", \"closed\"], [3, \"opened\", \"closed\", 4, \"ngIf\"], [\"for\", \"chartHeight\"], [\"min\", \"100\", \"max\", \"1000\", \"step\", \"10\", \"name\", \"chartHeight\", \"formControlName\", \"chartHeight\", 3, \"value\", \"valueChange\"], [\"sliderHeight\", \"\"], [\"for\", \"chartWidth\"], [\"min\", \"100\", \"max\", \"1000\", \"step\", \"10\", \"name\", \"chartWidth\", \"formControlName\", \"chartWidth\", 3, \"value\", \"valueChange\"], [\"sliderWidth\", \"\"], [\"name\", \"gridXLines\", \"formControlName\", \"showXAxisLines\", 4, \"ngIf\"], [\"name\", \"gridYLines\", \"formControlName\", \"showYAxisLines\", 4, \"ngIf\"], [\"name\", \"gridXLines\", \"formControlName\", \"showXAxisLines\"], [\"name\", \"gridYLines\", \"formControlName\", \"showYAxisLines\"], [\"name\", \"dataLabels\", \"formControlName\", \"showDataLabels\"], [\"name\", \"strokeShow\", \"formControlName\", \"showStroke\"], [\"for\", \"strokeWidth\"], [\"min\", \"0\", \"max\", \"5\", \"step\", \"0.2\", \"name\", \"strokeWidth\", \"formControlName\", \"strokeWidth\"]],\n  template: function ChartCustomizerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ChartCustomizerComponent_mat_accordion_0_Template, 11, 6, \"mat-accordion\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx._chartData);\n    }\n  },\n  directives: [i10.NgIf, i3$1.MatAccordion, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i3$1.MatExpansionPanel, i3$1.MatExpansionPanelHeader, i3$1.MatExpansionPanelTitle, i4$5.MatSlider, i2.NgControlStatus, i2.FormControlName, i5.MatCheckbox],\n  styles: [\"\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartCustomizerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-chart-customizer',\n      templateUrl: './chart-customizer.component.html',\n      styleUrls: ['./chart-customizer.component.css']\n    }]\n  }], function () {\n    return [{\n      type: ChartEditorService\n    }, {\n      type: i2.FormBuilder\n    }];\n  }, null);\n})();\n\nclass ChartEditorComponent {\n  constructor(chartEditorService) {\n    this.chartEditorService = chartEditorService;\n  }\n\n  get stateName() {\n    return this.isEditorOpen ? 'show' : 'hide';\n  }\n\n  ngOnInit() {\n    //subscripton to chartEditor service\n    this.chartEditorService.isEditorOpen_current.subscribe(_editorState => {\n      this.editorState = _editorState;\n      this.isEditorOpen = _editorState[0];\n    });\n  }\n\n  closeEditor() {\n    this.isEditorOpen = !this.isEditorOpen; //TODO handle chartID in case when editor is close via close button\n\n    this.chartEditorService.ToggleEditor(this.isEditorOpen, \"-999\");\n  }\n\n}\n\nChartEditorComponent.ɵfac = function ChartEditorComponent_Factory(t) {\n  return new (t || ChartEditorComponent)(i0.ɵɵdirectiveInject(ChartEditorService));\n};\n\nChartEditorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartEditorComponent,\n  selectors: [[\"app-chart-editor\"]],\n  decls: 10,\n  vars: 1,\n  consts: [[1, \"container\"], [1, \"chart-editor-header\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"aria-label\", \"Close\", 1, \"btn-close\", 3, \"click\"], [\"label\", \"Data\"], [\"label\", \"Customise\"]],\n  template: function ChartEditorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function ChartEditorComponent_Template_button_click_2_listener() {\n        return ctx.closeEditor();\n      });\n      i0.ɵɵelementStart(3, \"mat-icon\");\n      i0.ɵɵtext(4, \"close\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"mat-tab-group\");\n      i0.ɵɵelementStart(6, \"mat-tab\", 3);\n      i0.ɵɵelement(7, \"app-chart-setup\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"mat-tab\", 4);\n      i0.ɵɵelement(9, \"app-chart-customizer\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"@chartEditorAnimate\", ctx.stateName);\n    }\n  },\n  directives: [i3.MatButton, i4$2.MatIcon, i4$6.MatTabGroup, i4$6.MatTab, ChartSetupComponent, ChartCustomizerComponent],\n  styles: [\".container[_ngcontent-%COMP%]{display:flex;flex-direction:column;background-color:#f5f5f5;margin-top:10px;box-shadow:-11px -3px 19px -10px;min-height:40vh}.no-display[_ngcontent-%COMP%]{display:none}.chart-editor-header[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:flex-end}\"],\n  data: {\n    animation: [trigger('chartEditorAnimate', [state('show', style({\n      opacity: 1,\n      visibility: 'visible',\n      display: 'block'\n    })), state('hide', style({\n      opacity: 0,\n      visibility: 'hidden',\n      display: 'none'\n    })), transition('show<=>hide', [style({\n      display: 'block'\n    }), animate('200ms ease')])])]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartEditorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-chart-editor',\n      templateUrl: './chart-editor.component.html',\n      styleUrls: ['./chart-editor.component.css'],\n      animations: [trigger('chartEditorAnimate', [state('show', style({\n        opacity: 1,\n        visibility: 'visible',\n        display: 'block'\n      })), state('hide', style({\n        opacity: 0,\n        visibility: 'hidden',\n        display: 'none'\n      })), transition('show<=>hide', [style({\n        display: 'block'\n      }), animate('200ms ease')])])]\n    }]\n  }], function () {\n    return [{\n      type: ChartEditorService\n    }];\n  }, null);\n})();\n\nclass BarGraphComponent {\n  constructor(editorData, chartContainerService) {\n    this.editorData = editorData;\n    this.chartContainerService = chartContainerService;\n    this.chartId = new EventEmitter();\n  }\n\n  ngOnInit() {\n    this.barChart = new BarChart(this.editorData.UID()); //emit chart id on chart creation\n\n    this.chartId.emit(this.barChart.chartId);\n    this.chart = this.initChart(); // if input is provided then load data\n\n    if (this.barGraphData) {\n      this.chart.series = this.barGraphData.series;\n      this.chart.xaxis = this.barGraphData.xaxis;\n    } // on toggle edit chart\n\n\n    this.editorData.isEditorOpen_current.subscribe(_editorState => {\n      this.isEditorOpen = _editorState[0];\n      this.editorState = _editorState;\n    }); // on data modified event\n\n    this.editorData.editorData_current.subscribe(_modifiedChartObject => {\n      if (this.chartObj != null) {\n        //update if chartType and chartID is the same\n        if (_modifiedChartObject.chartType == this.barChart.chartType && _modifiedChartObject.chartId == this.barChart.chartId) {\n          this.chartData = _modifiedChartObject;\n          this.UpdateChart(_modifiedChartObject.chartData);\n          this.barChart = _modifiedChartObject;\n        }\n      }\n    });\n  } //#region component functions\n\n\n  initChart() {\n    return this.barChart.GetDefaults();\n  }\n\n  UpdateChart(chartOption) {\n    this.chartObj.updateOptions(chartOption);\n  } // to open chart editor\n\n\n  EditChart() {\n    if (this.isEditorOpen) {\n      //if editor is already open\n      if (this.editorState[1] == this.barChart.chartId) {\n        // chart data is already loaded on the editor\n        this.editorData.ToggleEditor(!this.editorState[0], this.barChart.chartId);\n      } else {\n        // need to load chart data on editor\n        this.editorData.ToggleEditor(this.editorState[0], this.barChart.chartId);\n        this.editorData.EditorDataUpdated(this.barChart);\n      }\n    } else {\n      this.editorData.ToggleEditor(!this.editorState[0], this.barChart.chartId);\n      this.editorData.EditorDataUpdated(this.barChart);\n    }\n  }\n\n  DeleteChart() {\n    this.chartContainerService.DeleteChart(this.barChart.chartId);\n  }\n\n}\n\nBarGraphComponent.ɵfac = function BarGraphComponent_Factory(t) {\n  return new (t || BarGraphComponent)(i0.ɵɵdirectiveInject(ChartEditorService), i0.ɵɵdirectiveInject(ChartContainerService));\n};\n\nBarGraphComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarGraphComponent,\n  selectors: [[\"app-bar-graph\"]],\n  viewQuery: function BarGraphComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartObj = _t.first);\n    }\n  },\n  inputs: {\n    barGraphData: \"barGraphData\"\n  },\n  outputs: {\n    chartId: \"chartId\"\n  },\n  decls: 10,\n  vars: 7,\n  consts: [[1, \"container\"], [1, \"chart-heading\"], [\"mat-icon-button\", \"\", \"id\", \"edit-icon\", 2, \"color\", \"gray\", 3, \"click\"], [3, \"title\", \"series\", \"chart\", \"dataLabels\", \"plotOptions\", \"xaxis\", \"theme\"], [\"chartObj\", \"\"]],\n  template: function BarGraphComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function BarGraphComponent_Template_button_click_2_listener() {\n        return ctx.DeleteChart();\n      });\n      i0.ɵɵelementStart(3, \"mat-icon\");\n      i0.ɵɵtext(4, \"delete\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function BarGraphComponent_Template_button_click_5_listener() {\n        return ctx.EditChart();\n      });\n      i0.ɵɵelementStart(6, \"mat-icon\");\n      i0.ɵɵtext(7, \"more_vert\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"apx-chart\", 3, 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"title\", ctx.chart.title)(\"series\", ctx.chart.series)(\"chart\", ctx.chart.chart)(\"dataLabels\", ctx.chart.dataLabels)(\"plotOptions\", ctx.chart.plotOptions)(\"xaxis\", ctx.chart.xaxis)(\"theme\", ctx.chart.theme);\n    }\n  },\n  directives: [i3.MatButton, i4$2.MatIcon, i5$1.ChartComponent],\n  styles: [\".container[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:100%}.container[_ngcontent-%COMP%] > apx-chart[_ngcontent-%COMP%]{flex:1}.chart-heading[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:flex-end}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarGraphComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-bar-graph',\n      templateUrl: './bar-graph.component.html',\n      styleUrls: ['./bar-graph.component.css']\n    }]\n  }], function () {\n    return [{\n      type: ChartEditorService\n    }, {\n      type: ChartContainerService\n    }];\n  }, {\n    barGraphData: [{\n      type: Input\n    }],\n    chartObj: [{\n      type: ViewChild,\n      args: ['chartObj']\n    }],\n    chartId: [{\n      type: Output\n    }]\n  });\n})();\n\nclass PieChartComponent {\n  constructor(data, chartContainerService) {\n    this.data = data;\n    this.chartContainerService = chartContainerService;\n    this.chartId = new EventEmitter();\n  }\n\n  ngOnInit() {\n    this.pieChart = new PieChart(this.data.UID());\n    this.chart = this.initChart(); //emit chart id on chart creation\n\n    this.chartId.emit(this.pieChart.chartId);\n\n    if (this.pieChartData) {\n      this.chart.series = this.pieChartData.series, this.chart.labels = this.pieChartData.labels;\n    } // on toggle edit chart\n\n\n    this.data.isEditorOpen_current.subscribe(_editorState => {\n      this.isEditorOpen = _editorState[0];\n      this.editorState = _editorState;\n    }); // on data modified event\n\n    this.data.editorData_current.subscribe(graphData => {\n      this.EditorData = graphData;\n\n      if (this.chartObj != null) {\n        if (graphData.chartType == \"Pie\") this.updateChart(graphData);\n      }\n    });\n  } //#region component functions\n  //to update the chart options\n\n\n  updateChart(chartOption) {\n    this.chartObj.updateOptions(chartOption);\n  } // to open chart editor\n\n\n  EditChart() {\n    if (this.isEditorOpen) {\n      //if editor is already open\n      if (this.editorState[1] == this.pieChart.chartId) {\n        // chart data is already loaded on the editor\n        this.data.ToggleEditor(!this.editorState[0], this.pieChart.chartId);\n      } else {\n        // need to load chart data on editor\n        this.data.ToggleEditor(this.editorState[0], this.pieChart.chartId);\n        this.data.EditorDataUpdated(this.pieChart);\n      }\n    } else {\n      this.data.ToggleEditor(!this.editorState[0], this.pieChart.chartId);\n      this.data.EditorDataUpdated(this.pieChart);\n    }\n  }\n  /**\r\n   * to delete the selected chart\r\n   */\n\n\n  DeleteChart() {\n    this.chartContainerService.DeleteChart(this.pieChart.chartId);\n  }\n\n  initChart() {\n    return this.pieChart.GetDefaults();\n  }\n\n}\n\nPieChartComponent.ɵfac = function PieChartComponent_Factory(t) {\n  return new (t || PieChartComponent)(i0.ɵɵdirectiveInject(ChartEditorService), i0.ɵɵdirectiveInject(ChartContainerService));\n};\n\nPieChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieChartComponent,\n  selectors: [[\"app-pie-chart\"]],\n  viewQuery: function PieChartComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartObj = _t.first);\n    }\n  },\n  inputs: {\n    pieChartData: \"pieChartData\"\n  },\n  outputs: {\n    chartId: \"chartId\"\n  },\n  decls: 10,\n  vars: 5,\n  consts: [[1, \"container\"], [1, \"chart-heading\"], [\"mat-icon-button\", \"\", \"color\", \"primary\", \"id\", \"edit-icon\", 2, \"color\", \"gray\", 3, \"click\"], [3, \"title\", \"series\", \"chart\", \"labels\", \"responsive\"], [\"chartObj\", \"\"]],\n  template: function PieChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function PieChartComponent_Template_button_click_2_listener() {\n        return ctx.DeleteChart();\n      });\n      i0.ɵɵelementStart(3, \"mat-icon\");\n      i0.ɵɵtext(4, \"delete\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function PieChartComponent_Template_button_click_5_listener() {\n        return ctx.EditChart();\n      });\n      i0.ɵɵelementStart(6, \"mat-icon\");\n      i0.ɵɵtext(7, \"more_vert\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"apx-chart\", 3, 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"title\", ctx.chart.title)(\"series\", ctx.chart.series)(\"chart\", ctx.chart.chart)(\"labels\", ctx.chart.labels)(\"responsive\", ctx.chart.responsive);\n    }\n  },\n  directives: [i3.MatButton, i4$2.MatIcon, i5$1.ChartComponent],\n  styles: [_c2]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-pie-chart',\n      templateUrl: './pie-chart.component.html',\n      styleUrls: ['./pie-chart.component.css']\n    }]\n  }], function () {\n    return [{\n      type: ChartEditorService\n    }, {\n      type: ChartContainerService\n    }];\n  }, {\n    pieChartData: [{\n      type: Input\n    }],\n    chartObj: [{\n      type: ViewChild,\n      args: ['chartObj']\n    }],\n    chartId: [{\n      type: Output\n    }]\n  });\n})();\n\nclass KeyPerformanceIndicatorComponent {\n  constructor() {\n    this.kpiColor = 'green';\n  }\n\n  ngOnInit() {\n    this.kpi = new KPI(this.kpiData.name, this.kpiData.metric, this.kpiData.icon);\n  }\n\n}\n\nKeyPerformanceIndicatorComponent.ɵfac = function KeyPerformanceIndicatorComponent_Factory(t) {\n  return new (t || KeyPerformanceIndicatorComponent)();\n};\n\nKeyPerformanceIndicatorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: KeyPerformanceIndicatorComponent,\n  selectors: [[\"app-kpi\"]],\n  inputs: {\n    kpiData: \"kpiData\"\n  },\n  decls: 13,\n  vars: 5,\n  consts: [[1, \"container\"], [1, \"kpi-header\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [2, \"margin-top\", \"10px\", \"color\", \"gray\"], [\"mat-icon-button\", \"\"], [2, \"color\", \"gray\"], [1, \"center\"]],\n  template: function KeyPerformanceIndicatorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"button\", 2);\n      i0.ɵɵelementStart(3, \"mat-icon\");\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 3);\n      i0.ɵɵtext(6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 4);\n      i0.ɵɵelementStart(8, \"mat-icon\", 5);\n      i0.ɵɵtext(9, \"more_vert\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 6);\n      i0.ɵɵtext(11);\n      i0.ɵɵpipe(12, \"currency\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.kpiData.icon);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.kpiData.name, \" \");\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(12, 3, ctx.kpiData.metric), \" \");\n    }\n  },\n  directives: [i3.MatButton, i4$2.MatIcon],\n  pipes: [i10.CurrencyPipe],\n  styles: [\".container[_ngcontent-%COMP%]{display:flex;flex-direction:column}.kpi-header[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:space-between}.center[_ngcontent-%COMP%]{margin:0;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);font-size:54px;font-weight:10px}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KeyPerformanceIndicatorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-kpi',\n      templateUrl: './key-performance-indicator.component.html',\n      styleUrls: ['./key-performance-indicator.component.css']\n    }]\n  }], function () {\n    return [];\n  }, {\n    kpiData: [{\n      type: Input\n    }]\n  });\n})();\n\nclass LineChartComponent {\n  constructor(editorData, chartContainerService) {\n    this.editorData = editorData;\n    this.chartContainerService = chartContainerService;\n    this.chartId = new EventEmitter();\n  }\n\n  ngOnInit() {\n    this.lineChart = new LineChart(this.editorData.UID());\n    this.chart = this.initChart(); //emit chart id on chart creation\n\n    this.chartId.emit(this.lineChart.chartId);\n\n    if (this.lineChartData) {\n      this.chart.series = this.lineChartData.series;\n      this.chart.xaxis = this.lineChartData.xaxis;\n    } // on toggle edit chart\n\n\n    this.editorData.isEditorOpen_current.subscribe(_editorState => {\n      this.isEditorOpen = _editorState[0];\n      this.editorState = _editorState;\n    }); // on data modified event\n\n    this.editorData.editorData_current.subscribe(_modifiedChartObject => {\n      if (this.chartObj != null) {\n        //update if chartType and chartID is the same\n        if (_modifiedChartObject.chartType == this.lineChart.chartType && _modifiedChartObject.chartId == this.lineChart.chartId) {\n          this.chartData = _modifiedChartObject;\n          this.updateChart(_modifiedChartObject.chartData);\n          this.lineChart = _modifiedChartObject;\n        }\n      }\n    });\n  } //to update the chart options\n\n\n  updateChart(chartOption) {\n    this.chartObj.updateOptions(chartOption);\n  } // to open chart editor\n\n\n  EditChart() {\n    if (this.isEditorOpen) {\n      //if editor is already open\n      if (this.editorState[1] == this.lineChart.chartId) {\n        // chart data is already loaded on the editor\n        this.editorData.ToggleEditor(!this.editorState[0], this.lineChart.chartId);\n      } else {\n        // need to load chart data on editor\n        this.editorData.ToggleEditor(this.editorState[0], this.lineChart.chartId);\n        this.editorData.EditorDataUpdated(this.lineChart);\n      }\n    } else {\n      this.editorData.ToggleEditor(!this.editorState[0], this.lineChart.chartId);\n      this.editorData.EditorDataUpdated(this.lineChart);\n    }\n  }\n  /**\r\n   * to the delete the selected chart\r\n   */\n\n\n  DeleteChart() {\n    this.chartContainerService.DeleteChart(this.lineChart.chartId);\n  }\n\n  initChart() {\n    return this.lineChart.GetDefaults();\n  }\n\n}\n\nLineChartComponent.ɵfac = function LineChartComponent_Factory(t) {\n  return new (t || LineChartComponent)(i0.ɵɵdirectiveInject(ChartEditorService), i0.ɵɵdirectiveInject(ChartContainerService));\n};\n\nLineChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineChartComponent,\n  selectors: [[\"app-line-chart\"]],\n  viewQuery: function LineChartComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartObj = _t.first);\n    }\n  },\n  inputs: {\n    lineChartData: \"lineChartData\"\n  },\n  outputs: {\n    chartId: \"chartId\"\n  },\n  decls: 10,\n  vars: 7,\n  consts: [[1, \"container\"], [1, \"chart-heading\"], [\"mat-icon-button\", \"\", \"id\", \"edit-icon\", 2, \"color\", \"gray\", 3, \"click\"], [3, \"series\", \"chart\", \"xaxis\", \"dataLabels\", \"grid\", \"stroke\", \"title\"], [\"chartObj\", \"\"]],\n  template: function LineChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function LineChartComponent_Template_button_click_2_listener() {\n        return ctx.DeleteChart();\n      });\n      i0.ɵɵelementStart(3, \"mat-icon\");\n      i0.ɵɵtext(4, \"delete\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function LineChartComponent_Template_button_click_5_listener() {\n        return ctx.EditChart();\n      });\n      i0.ɵɵelementStart(6, \"mat-icon\");\n      i0.ɵɵtext(7, \"more_vert\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"apx-chart\", 3, 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"series\", ctx.chart.series)(\"chart\", ctx.chart.chart)(\"xaxis\", ctx.chart.xaxis)(\"dataLabels\", ctx.chart.dataLabels)(\"grid\", ctx.chart.grid)(\"stroke\", ctx.chart.stroke)(\"title\", ctx.chart.title);\n    }\n  },\n  directives: [i3.MatButton, i4$2.MatIcon, i5$1.ChartComponent],\n  styles: [_c2]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-line-chart',\n      templateUrl: './line-chart.component.html',\n      styleUrls: ['./line-chart.component.css']\n    }]\n  }], function () {\n    return [{\n      type: ChartEditorService\n    }, {\n      type: ChartContainerService\n    }];\n  }, {\n    lineChartData: [{\n      type: Input\n    }],\n    chartObj: [{\n      type: ViewChild,\n      args: ['chartObj']\n    }],\n    chartId: [{\n      type: Output\n    }]\n  });\n})();\n\nclass ChartsContainerComponent {\n  /**\r\n   * @param dashboardService to fetch data for dashboard\r\n   * @param chartContainerService service to transfer chart data between components\r\n   */\n  constructor(dashboardService, chartContainerService, chartEditorService) {\n    this.dashboardService = dashboardService;\n    this.chartContainerService = chartContainerService;\n    this.chartEditorService = chartEditorService;\n    this.showChartTypesList = false;\n    this._dashboard = dashboardService.loadDashboardData(); //toggle demo charts\n\n    if (AppConfig.settings.variables.demoChartVisible) {\n      this._dashboard.charts = [];\n    }\n\n    this.chartEditorService.editorData_current.subscribe(_chartObject => {\n      this._currentChartData = _chartObject;\n    });\n  } //#region gridster static methods \n\n\n  static itemChange(item, itemComponent) {\n    console.info('itemChanged', item, itemComponent);\n  }\n\n  static itemResize(item, itemComponent) {\n    console.info('itemResized', item, itemComponent);\n  }\n\n  UpdateChart(item, itemComponent) {} //#endregion\n\n\n  ngOnInit() {\n    // bind deleteChart function to service's delete chart function\n    this.chartContainerService.DeleteSelectedChart(this.DeleteChart.bind(this)); //initialize listOfChartTypes\n\n    this.listOfChartTypes = this.dashboardService.GetListOfChartTypes(); //#region gridster init\n\n    this.options = {\n      gridType: GridType.Fit,\n      compactType: CompactType.None,\n      margin: 10,\n      outerMargin: true,\n      outerMarginTop: null,\n      outerMarginRight: null,\n      outerMarginBottom: null,\n      outerMarginLeft: null,\n      useTransformPositioning: true,\n      mobileBreakpoint: 640,\n      minCols: 160,\n      maxCols: 160,\n      minRows: 100,\n      maxRows: 100,\n      maxItemCols: 200,\n      minItemCols: 1,\n      maxItemRows: 200,\n      minItemRows: 1,\n      maxItemArea: 40000,\n      minItemArea: 1,\n      defaultItemCols: 1,\n      defaultItemRows: 1,\n      fixedColWidth: 105,\n      fixedRowHeight: 105,\n      keepFixedHeightInMobile: false,\n      keepFixedWidthInMobile: false,\n      scrollSensitivity: 10,\n      scrollSpeed: 20,\n      enableEmptyCellClick: false,\n      enableEmptyCellContextMenu: false,\n      enableEmptyCellDrop: false,\n      enableEmptyCellDrag: false,\n      enableOccupiedCellDrop: false,\n      emptyCellDragMaxCols: 50,\n      emptyCellDragMaxRows: 50,\n      ignoreMarginInRow: false,\n      draggable: {\n        enabled: true\n      },\n      resizable: {\n        enabled: true\n      },\n      swap: false,\n      pushItems: true,\n      disablePushOnDrag: false,\n      disablePushOnResize: false,\n      pushDirections: {\n        north: false,\n        east: false,\n        south: false,\n        west: false\n      },\n      pushResizeItems: false,\n      displayGrid: DisplayGrid.None,\n      disableWindowResize: false,\n      disableWarnings: false,\n      scrollToNewItems: false,\n      itemResizeCallback: this.UpdateChart\n    };\n  } //#region gridster methods\n\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({\n      x: 0,\n      y: 0,\n      cols: 1,\n      rows: 1\n    });\n  } //#endregion\n\n\n  AddChart(chartType) {\n    /**\r\n     * add chart type on selection basis\r\n     * dynamically load chart component\r\n     */\n    if (chartType.toUpperCase() == \"BAR\") {\n      this._dashboard.charts.push(this.dashboardService.GetDefaultBarChartObject());\n    }\n\n    if (chartType.toUpperCase() == \"PIE\") {\n      this._dashboard.charts.push(this.dashboardService.GetDefaultPieChartObject());\n    }\n\n    if (chartType.toUpperCase() == \"KPI\") {\n      this._dashboard.charts.push(this.dashboardService.GetDefaultKpiChartObject());\n    }\n\n    if (chartType.toUpperCase() == \"LINE\") {\n      this._dashboard.charts.push(this.dashboardService.GetDefaultLineChartObject());\n    }\n\n    this.showChartTypesList = false;\n  }\n\n  DeleteChart(chartId) {\n    /**\r\n     * will be called from chart itself using chart-container service\r\n     * remove from UI\r\n     * update dashboard\r\n     */\n    //filter out the chart not required based on id\n    var filteredData = this._dashboard.charts.filter(chartData => {\n      return chartData.chartID != chartId;\n    });\n\n    this._dashboard.charts = filteredData;\n  }\n\n  SaveDashboard() {\n    /**\r\n     * creates dashboard object\r\n     * returns the object to be saved\r\n     */\n    this.dashboardService.SaveDashboardData(this._dashboard);\n  }\n\n}\n\nChartsContainerComponent.ɵfac = function ChartsContainerComponent_Factory(t) {\n  return new (t || ChartsContainerComponent)(i0.ɵɵdirectiveInject(DashboardService), i0.ɵɵdirectiveInject(ChartContainerService), i0.ɵɵdirectiveInject(ChartEditorService));\n};\n\nChartsContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartsContainerComponent,\n  selectors: [[\"app-charts-container\"]],\n  viewQuery: function ChartsContainerComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(NewChartTabDirective, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.newChart = _t.first);\n    }\n  },\n  decls: 15,\n  vars: 4,\n  consts: [[\"chartTypeMenu\", \"matMenu\"], [4, \"ngFor\", \"ngForOf\"], [1, \"top-toolbar\"], [\"color\", \"basic\", 1, \"edit-toolbar-options\"], [\"mat-button\", \"\", \"color\", \"primary\", 3, \"matMenuTriggerFor\"], [\"mat-button\", \"\", \"color\", \"primary\"], [1, \"chart-container\"], [\"id\", \"chart-editor\"], [1, \"gridster-grid\"], [2, \"background-color\", \"rgb(227, 228, 228)\", 3, \"options\"], [3, \"item\", 4, \"ngFor\", \"ngForOf\"], [\"mat-menu-item\", \"\", 3, \"click\"], [3, \"item\"], [3, \"ngIf\"], [3, \"barGraphData\", \"chartId\"], [3, \"pieChartData\", \"chartId\"], [3, \"kpiData\"], [3, \"lineChartData\", \"chartId\"]],\n  template: function ChartsContainerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-menu\", null, 0);\n      i0.ɵɵtemplate(2, ChartsContainerComponent_div_2_Template, 6, 2, \"div\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵelementStart(4, \"mat-toolbar\", 3);\n      i0.ɵɵelementStart(5, \"div\");\n      i0.ɵɵelementStart(6, \"button\", 4);\n      i0.ɵɵtext(7, \" Add Chart \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"button\", 5);\n      i0.ɵɵtext(9, \" Save Chart \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 6);\n      i0.ɵɵelement(11, \"app-chart-editor\", 7);\n      i0.ɵɵelementStart(12, \"div\", 8);\n      i0.ɵɵelementStart(13, \"gridster\", 9);\n      i0.ɵɵtemplate(14, ChartsContainerComponent_gridster_item_14_Template, 5, 5, \"gridster-item\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.listOfChartTypes);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"matMenuTriggerFor\", _r0);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"options\", ctx.options);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx._dashboard.charts);\n    }\n  },\n  directives: [i8.MatMenu, i10.NgForOf, i4$4.MatToolbar, i3.MatButton, i8.MatMenuTrigger, ChartEditorComponent, i6.GridsterComponent, i8.MatMenuItem, i4$2.MatIcon, i6.GridsterItemComponent, i10.NgIf, BarGraphComponent, PieChartComponent, KeyPerformanceIndicatorComponent, LineChartComponent],\n  styles: [\".chart-container{display:grid;grid-template-columns:auto;height:200vh}#chart-editor{position:absolute;z-index:20;right:-0px}.no-display{display:none}.top-toolbar{position:sticky;top:0;z-index:21}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:block!important;align-items:flex-start;justify-content:flex-start;height:100%;width:100%;padding:0;margin:0}#addChartIcon{transform:scale(2)}#ddl-chart-types{position:absolute;min-width:200px;z-index:1;left:78ex;box-shadow:0 1px 2px #00000012,0 2px 4px #00000012,0 4px 8px #00000012,0 8px 16px #00000012,0 16px 32px #00000012,0 32px 64px #00000012}.edit-toolbar-options{justify-content:flex-end}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartsContainerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-charts-container',\n      templateUrl: './charts-container.component.html',\n      styleUrls: ['./charts-container.component.css'],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: DashboardService\n    }, {\n      type: ChartContainerService\n    }, {\n      type: ChartEditorService\n    }];\n  }, {\n    newChart: [{\n      type: ViewChild,\n      args: [NewChartTabDirective, {\n        static: true\n      }]\n    }]\n  });\n})();\n\nconst routes = [{\n  path: 'dashboard/all',\n  component: DashboardContainerComponent\n}, {\n  path: 'dashboard/current',\n  component: ChartsContainerComponent\n}, {\n  path: \"\",\n  redirectTo: '/dashboard/all',\n  pathMatch: 'full'\n}];\n\nclass AppRoutingModule {}\n\nAppRoutingModule.ɵfac = function AppRoutingModule_Factory(t) {\n  return new (t || AppRoutingModule)();\n};\n\nAppRoutingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AppRoutingModule\n});\nAppRoutingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[RouterModule.forRoot(routes)], RouterModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AppRoutingModule, [{\n    type: NgModule,\n    args: [{\n      imports: [RouterModule.forRoot(routes)],\n      exports: [RouterModule]\n    }]\n  }], null, null);\n})();\n\nconst routingComponents = [DashboardContainerComponent, ChartsContainerComponent];\n\nclass ReadExcelDirective {\n  constructor() {\n    this.dataReadEvent = new EventEmitter();\n  }\n\n  OnChange(target) {\n    const file = target.files[0];\n    const excelObservable = new Observable(subscriber => {\n      this.ReadFile(file, subscriber);\n    });\n    excelObservable.subscribe(data => {\n      this.dataReadEvent.emit(data);\n    });\n  }\n\n  ReadFile(file, subscriber) {\n    const fileReader = new FileReader(); // reading file as buffer\n\n    fileReader.readAsArrayBuffer(file);\n\n    fileReader.onload = e => {\n      const bufferArray = e.target.result; // creating workbook from file \n\n      const wb = XLSX.read(bufferArray, {\n        type: 'buffer'\n      });\n      subscriber.next(wb);\n      subscriber.complete();\n    };\n  }\n\n}\n\nReadExcelDirective.ɵfac = function ReadExcelDirective_Factory(t) {\n  return new (t || ReadExcelDirective)();\n};\n\nReadExcelDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ReadExcelDirective,\n  selectors: [[\"\", \"ReadExcel\", \"\"]],\n  hostBindings: function ReadExcelDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"change\", function ReadExcelDirective_change_HostBindingHandler($event) {\n        return ctx.OnChange($event.target);\n      });\n    }\n  },\n  outputs: {\n    dataReadEvent: \"dataReadEvent\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ReadExcelDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ReadExcel]'\n    }]\n  }], function () {\n    return [];\n  }, {\n    dataReadEvent: [{\n      type: Output\n    }],\n    OnChange: [{\n      type: HostListener,\n      args: [\"change\", [\"$event.target\"]]\n    }]\n  });\n})();\n\nfunction initializeApp(appConfig) {\n  return () => appConfig.load();\n}\n\nclass DashxModule {}\n\nDashxModule.ɵfac = function DashxModule_Factory(t) {\n  return new (t || DashxModule)();\n};\n\nDashxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: DashxModule\n});\nDashxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [AppConfig, {\n    provide: APP_INITIALIZER,\n    useFactory: initializeApp,\n    deps: [AppConfig],\n    multi: true\n  }, DashboardService, ChartEditorService, DataHandlerService, {\n    provide: MAT_COLOR_FORMATS,\n    useValue: NGX_MAT_COLOR_FORMATS\n  }],\n  imports: [[CommonModule, AppRoutingModule, NgApexchartsModule, MatToolbarModule, MatCardModule, MatFormFieldModule, MatIconModule, MatInputModule, MatButtonModule, MatGridListModule, FormsModule, ReactiveFormsModule, MatCheckboxModule, MatSliderModule, MatTabsModule, MatExpansionModule, MatDividerModule, MatListModule, MatExpansionModule, MatMenuModule, MatRadioModule, BrowserAnimationsModule, GridsterModule, HttpClientModule, MatDialogModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DashxModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [DashxComponent, LineChartComponent, PieChartComponent, BarGraphComponent, ChartEditorComponent, ChartSetupComponent, ReadExcelDirective, KeyPerformanceIndicatorComponent, routingComponents, NewChartTabDirective, ChartCustomizerComponent, CreateDashboardComponent, AddDashboardComponent, DashboardContainerComponent, ChartsContainerComponent],\n      imports: [CommonModule, AppRoutingModule, NgApexchartsModule, MatToolbarModule, MatCardModule, MatFormFieldModule, MatIconModule, MatInputModule, MatButtonModule, MatGridListModule, FormsModule, ReactiveFormsModule, MatCheckboxModule, MatSliderModule, MatTabsModule, MatExpansionModule, MatDividerModule, MatListModule, MatExpansionModule, MatMenuModule, MatRadioModule, BrowserAnimationsModule, GridsterModule, HttpClientModule, MatDialogModule],\n      exports: [DashxComponent, DashboardContainerComponent, ChartsContainerComponent],\n      providers: [AppConfig, {\n        provide: APP_INITIALIZER,\n        useFactory: initializeApp,\n        deps: [AppConfig],\n        multi: true\n      }, DashboardService, ChartEditorService, DataHandlerService, {\n        provide: MAT_COLOR_FORMATS,\n        useValue: NGX_MAT_COLOR_FORMATS\n      }]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of dashx\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ChartsContainerComponent, DashboardContainerComponent, DashxComponent, DashxModule, DashxService, initializeApp };","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Component, Inject, Directive, EventEmitter, Input, ViewChild, Output, ChangeDetectionStrategy, ViewEncapsulation, NgModule, HostListener, APP_INITIALIZER } from '@angular/core';\nimport * as i10 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1$2 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i6 from 'angular-gridster2';\nimport { GridType, CompactType, DisplayGrid, GridsterModule } from 'angular-gridster2';\nimport * as i1 from '@angular/common/http';\nimport { HttpClientModule } from '@angular/common/http';\nimport * as i1$1 from '@angular/material/dialog';\nimport { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\nimport * as i4 from '@angular/material/form-field';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i4$1 from '@angular/material/input';\nimport { MatInputModule } from '@angular/material/input';\nimport * as i2 from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport * as i4$4 from '@angular/material/toolbar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport * as i4$2 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i4$3 from '@angular/material/grid-list';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport * as i8 from '@angular/material/menu';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i4$6 from '@angular/material/tabs';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport * as i3$1 from '@angular/material/expansion';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport * as i7 from '@angular/material/list';\nimport { MatListModule } from '@angular/material/list';\nimport * as i4$5 from '@angular/material/slider';\nimport { MatSliderModule } from '@angular/material/slider';\nimport * as i5 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i5$1 from 'ng-apexcharts';\nimport { NgApexchartsModule } from 'ng-apexcharts';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MAT_COLOR_FORMATS, NGX_MAT_COLOR_FORMATS } from '@angular-material-components/color-picker';\nimport { MatDividerModule } from '@angular/material/divider';\nimport * as XLSX from 'xlsx';\n\nclass DashxService {\r\n    constructor() { }\r\n}\r\nDashxService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DashxService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nDashxService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DashxService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DashxService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass DashxComponent {\r\n    constructor() { }\r\n    ngOnInit() {\r\n    }\r\n}\r\nDashxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DashxComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nDashxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.2\", type: DashxComponent, selector: \"lib-dashx\", ngImport: i0, template: `\n    <p>\n      dashx works!\n    </p>\n  `, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DashxComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'lib-dashx',\r\n                    template: `\n    <p>\n      dashx works!\n    </p>\n  `,\r\n                    styles: []\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nvar env = {\n\tname: \"DEV\"\n};\nvar variables = {\n\tdemoChartVisible: \"false\"\n};\nvar config_dev = {\n\tenv: env,\n\tvariables: variables\n};\n\nvar config = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    env: env,\n    variables: variables,\n    'default': config_dev\n});\n\nclass AppConfig {\r\n    constructor(http) {\r\n        this.http = http;\r\n    }\r\n    load() {\r\n        const jsonFile = 'assets/config/config.dev.json';\r\n        return new Promise((resolve, reject) => {\r\n            AppConfig.settings = config;\r\n            resolve();\r\n        });\r\n    }\r\n}\r\nAppConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: AppConfig, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\r\nAppConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: AppConfig, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: AppConfig, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\n\nclass AddDashboardComponent {\r\n    constructor(dialogRef, data) {\r\n        this.dialogRef = dialogRef;\r\n        this.data = data;\r\n    }\r\n    onCancelClick() {\r\n        this.dialogRef.close();\r\n    }\r\n    ngOnInit() {\r\n    }\r\n}\r\nAddDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: AddDashboardComponent, deps: [{ token: i1$1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });\r\nAddDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.2\", type: AddDashboardComponent, selector: \"app-add-dashboard\", ngImport: i0, template: \"<div class = \\\"container\\\">\\r\\n<div>\\r\\n<div mat-dialog-content >\\r\\n  <p>Title</p>\\r\\n  <mat-form-field appearance=\\\"fill\\\"> \\r\\n    <input matInput [(ngModel)]=\\\"data.title\\\">\\r\\n  </mat-form-field>\\r\\n\\r\\n  <p>Description</p>\\r\\n  <mat-form-field appearance=\\\"fill\\\">\\r\\n    <input matInput [(ngModel)]=\\\"data.description\\\">\\r\\n  </mat-form-field>\\r\\n\\r\\n</div>\\r\\n<div mat-dialog-actions>\\r\\n  <button mat-button (click)=\\\"onCancelClick()\\\" >Cancel</button>\\r\\n  <button mat-button [mat-dialog-close]=\\\"data\\\" cdkFocusInitial>Save</button>\\r\\n</div>\\r\\n\\r\\n</div>\\r\\n</div>\", styles: [\".container{width:500px;margin:10px}.mat-form-field{width:100%}.mat-button{right:-350px}\\n\"], components: [{ type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"floatLabel\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i1$1.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { type: i4$1.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"id\", \"disabled\", \"required\", \"type\", \"value\", \"readonly\", \"placeholder\", \"errorStateMatcher\", \"aria-describedby\"], exportAs: [\"matInput\"] }, { type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i1$1.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\" }, { type: i1$1.MatDialogClose, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: [\"type\", \"mat-dialog-close\", \"aria-label\", \"matDialogClose\"], exportAs: [\"matDialogClose\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: AddDashboardComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'app-add-dashboard',\r\n                    templateUrl: './add-dashboard.component.html',\r\n                    styleUrls: ['./add-dashboard.component.css']\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1$1.MatDialogRef }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MAT_DIALOG_DATA]\r\n                }] }]; } });\n\nclass DashboardService {\r\n    constructor() {\r\n        //#region dummy chart data\r\n        this.barChartDummyData = {\r\n            series: [\r\n                {\r\n                    name: \"basic\",\r\n                    data: [400, 430, 448, 470, 540, 580, 690, 1100, 1200, 1380]\r\n                }\r\n            ],\r\n            xaxis: {\r\n                categories: [\r\n                    \"South Korea\",\r\n                    \"Canada\",\r\n                    \"United Kingdom\",\r\n                    \"Netherlands\",\r\n                    \"Italy\",\r\n                    \"France\",\r\n                    \"Japan\",\r\n                    \"United States\",\r\n                    \"China\",\r\n                    \"Germany\"\r\n                ]\r\n            }\r\n        };\r\n        this.kpiDummyData = {\r\n            name: \"Quaterly Revenue\",\r\n            metric: \"200\",\r\n            icon: \"show_chart\"\r\n        };\r\n        this.pieChartDummyData = {\r\n            labels: ['Team A', 'Team B', 'Team C', 'Team D', 'Team E'],\r\n            series: [44, 55, 13, 43, 22]\r\n        };\r\n        this.lineChartDummyData = {\r\n            series: [{\r\n                    name: \"Desktops\",\r\n                    data: [10, 41, 35, 51, 49, 62, 69, 91, 148]\r\n                }],\r\n            xaxis: {\r\n                categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep']\r\n            }\r\n        };\r\n        this.dashboardDummyData =\r\n            {\r\n                title: 'Inventory',\r\n                description: 'Inventory sold'\r\n            };\r\n        //#endregion\r\n        //#region dummy chart position data\r\n        this.demoPieChartPosition = {\r\n            rows: 21,\r\n            cols: 52,\r\n            x: 0,\r\n            y: 0\r\n        };\r\n        this.demoLineChartPosition = {\r\n            rows: 21,\r\n            cols: 52,\r\n            x: 0,\r\n            y: 0\r\n        };\r\n        this.demoBarChartPosition = {\r\n            rows: 21,\r\n            cols: 52,\r\n            x: 0,\r\n            y: 0\r\n        };\r\n        this.demoKPIPosition = {\r\n            rows: 11,\r\n            cols: 36,\r\n            x: 0,\r\n            y: 0\r\n        };\r\n        //#endregion\r\n        this.demoDashboardPosition =\r\n            {\r\n                rows: 21,\r\n                cols: 52,\r\n                x: 0,\r\n                y: 0\r\n            };\r\n    }\r\n    loadPieChartData() {\r\n        return {\r\n            series: [44, 55, 13, 43, 22],\r\n            labels: [\"Team A\", \"Team B\", \"Team C\", \"Team D\", \"Team E\"]\r\n        };\r\n    }\r\n    loadLineChartData() {\r\n        return {\r\n            series: [{\r\n                    name: \"Desktops\",\r\n                    data: [10, 41, 35, 51, 49, 62, 69, 91, 148],\r\n                }],\r\n            xaxis: {\r\n                categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\"]\r\n            }\r\n        };\r\n    }\r\n    loadBarGraphData() {\r\n        return {\r\n            series: [\r\n                {\r\n                    name: \"basic\",\r\n                    data: [400, 430, 448, 470, 540, 580, 690, 1100, 1200, 1380]\r\n                }\r\n            ],\r\n            xaxis: {\r\n                categories: [\"South Korea\", \"Canada\", \"United Kingdom\", \"Netherlands\", \"Italy\", \"France\", \"Japan\", \"United States\", \"China\", \"Germany\"]\r\n            }\r\n        };\r\n    }\r\n    loadDashboardData() {\r\n        return {\r\n            id: \"100\",\r\n            data: {\r\n                title: \"jojo\",\r\n                description: \"awsm charts\"\r\n            },\r\n            color: \"red\",\r\n            position: {\r\n                rows: 0,\r\n                cols: 0,\r\n                x: 0,\r\n                y: 0\r\n            },\r\n            charts: [\r\n                {\r\n                    chartType: \"line\",\r\n                    chartID: 0,\r\n                    position: {\r\n                        cols: 80,\r\n                        rows: 45,\r\n                        x: 2,\r\n                        y: 3\r\n                    },\r\n                    chartData: this.lineChartDummyData\r\n                }\r\n            ]\r\n        };\r\n    }\r\n    GetDefaultBarChartObject() {\r\n        return {\r\n            chartData: this.barChartDummyData,\r\n            chartID: 0,\r\n            chartType: 'bar',\r\n            position: this.demoBarChartPosition\r\n        };\r\n    }\r\n    GetDefaultLineChartObject() {\r\n        return {\r\n            chartData: this.lineChartDummyData,\r\n            chartID: 0,\r\n            chartType: 'line',\r\n            position: this.demoLineChartPosition\r\n        };\r\n    }\r\n    GetDefaultPieChartObject() {\r\n        return {\r\n            chartData: this.pieChartDummyData,\r\n            chartID: 0,\r\n            chartType: 'pie',\r\n            position: this.demoPieChartPosition\r\n        };\r\n    }\r\n    GetDefaultKpiChartObject() {\r\n        return {\r\n            chartData: this.kpiDummyData,\r\n            chartID: 0,\r\n            chartType: 'kpi',\r\n            position: this.demoKPIPosition\r\n        };\r\n    }\r\n    GetDefaultChartObject() {\r\n        console.log(this.dashboardDummyData);\r\n        return {\r\n            chartData: this.dashboardDummyData,\r\n            chartID: 0,\r\n            chartType: 'Dashboard',\r\n            position: this.demoDashboardPosition\r\n        };\r\n    }\r\n    GetListOfChartTypes() {\r\n        return [{\r\n                name: \"Kpi\",\r\n                icon: \"vpn_key\"\r\n            }, {\r\n                name: \"Pie\",\r\n                icon: \"pie_chart\"\r\n            }, {\r\n                name: \"Bar\",\r\n                icon: \"bar_chart\"\r\n            },\r\n            {\r\n                name: \"Line\",\r\n                icon: \"show_chart\"\r\n            }];\r\n    }\r\n    SaveDashboardData(dashboardData) {\r\n        console.log('////saving data////', dashboardData);\r\n    }\r\n}\r\nDashboardService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DashboardService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nDashboardService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DashboardService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DashboardService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass ChartEditorService {\r\n    constructor() {\r\n        this.isEditorOpen = new BehaviorSubject([false, '']);\r\n        this.isEditorOpen_current = this.isEditorOpen.asObservable();\r\n        this.editorData = new BehaviorSubject(null);\r\n        this.editorData_current = this.editorData.asObservable();\r\n    }\r\n    ToggleEditor(isEditorOpen, chartID) {\r\n        this.isEditorOpen.next([isEditorOpen, chartID]);\r\n    }\r\n    /**\r\n     * (observed function) contains the entire chart data\r\n     * @param editorData includes the entire chart data\r\n     */\r\n    EditorDataUpdated(editorData) {\r\n        this.editorData.next(editorData);\r\n    }\r\n    /**\r\n     * to generate unique ids for graphs\r\n     * @returns unique id\r\n     */\r\n    UID() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n}\r\nChartEditorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ChartEditorService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nChartEditorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ChartEditorService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ChartEditorService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass CreateDashboardComponent {\r\n    constructor(_router) {\r\n        this._router = _router;\r\n        this.dashboardList = [{ content: \"Sales\", description: \"Description\", color: \"blue\" }];\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    OpenDashboard() {\r\n        this._router.navigateByUrl('/dashboard/current');\r\n    }\r\n}\r\nCreateDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: CreateDashboardComponent, deps: [{ token: i1$2.Router }], target: i0.ɵɵFactoryTarget.Component });\r\nCreateDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.2\", type: CreateDashboardComponent, selector: \"app-create-dashboard\", ngImport: i0, template: \" <div class='dashboard-container'>\\r\\n   <div class=\\\"container\\\">\\r\\n     <div class=\\\"dashboard-heading\\\">\\r\\n       <button mat-icon-button style=\\\"color: gray;\\\" id=\\\"edit-icon\\\" >\\r\\n         <mat-icon>delete</mat-icon>\\r\\n       </button>\\r\\n       <button mat-icon-button style=\\\"color: gray;\\\" id=\\\"edit-icon\\\" >\\r\\n         <mat-icon>more_vert</mat-icon>\\r\\n       </button>\\r\\n     </div>\\r\\n<mat-grid-list cols=\\\"3\\\" rowHeight=\\\"2:1\\\"  class = \\\"dashboard\\\" >\\r\\n     <div *ngFor=\\\"let item of dashboardList\\\" style=\\\"height: 100%;\\\">\\r\\n       <button mat-raised-button color = 'primary'  (click) = 'OpenDashboard()' class = \\\"dashboard-button\\\">\\r\\n        <p class = 'dashboard-title'>\\r\\n          {{item.content}}\\r\\n        </p>   \\r\\n          <p class = 'dashboard-description'>\\r\\n            {{item.description}}\\r\\n         </p>\\r\\n         </button>\\r\\n \\r\\n     </div>\\r\\n   </mat-grid-list>\\r\\n</div>\", styles: [\".container{height:100%}.dashboard{display:grid;grid-template-columns:auto;height:100%}.dashboard-container{height:100%}.no-display{display:none}.top-toolbar{position:sticky;top:0;z-index:21}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:block!important;align-items:flex-start;justify-content:flex-start;height:100%;width:100%;padding:0;margin:0}#addChartIcon{transform:scale(2)}.edit-toolbar-options{justify-content:flex-end}:hover .test-class{background-color:#0ff}.dashboard-title{font-size:30px}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:block!important;align-items:flex-start;justify-content:flex-start;height:100%;width:100%;padding:0;margin:0;font-weight:bold}.icon_large{transform:scale(3)}.dashboard-description{font-weight:lighter;font-size:18px;bottom:0}.dashboard-heading{display:flex;flex-direction:row;justify-content:flex-end;background-color:#fff}.dashboard-button{width:100%;height:100%}\\n\"], components: [{ type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i4$2.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { type: i4$3.MatGridList, selector: \"mat-grid-list\", inputs: [\"cols\", \"gutterSize\", \"rowHeight\"], exportAs: [\"matGridList\"] }], directives: [{ type: i10.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: CreateDashboardComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'app-create-dashboard',\r\n                    templateUrl: './create-dashboard.component.html',\r\n                    styleUrls: ['./create-dashboard.component.css']\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1$2.Router }]; } });\n\nclass DashboardContainerComponent {\r\n    constructor(_router, dashboardService, dialog) {\r\n        this._router = _router;\r\n        this.dashboardService = dashboardService;\r\n        this.dialog = dialog;\r\n        this.dashboardList = [\r\n            {\r\n                content: \"Sales\",\r\n                description: \"Description\",\r\n                color: \"blue\",\r\n                position: {\r\n                    rows: 3,\r\n                    cols: 3,\r\n                    x: 0,\r\n                    y: 0\r\n                }\r\n            }\r\n        ];\r\n        this._dashboard = dashboardService.loadDashboardData();\r\n        //toggle demo charts\r\n        if (AppConfig.settings.variables.demoChartVisible) {\r\n            this._dashboard.charts = [];\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        //#region gridster init\r\n        this.options = {\r\n            gridType: GridType.Fit,\r\n            compactType: CompactType.None,\r\n            margin: 10,\r\n            outerMargin: true,\r\n            outerMarginTop: null,\r\n            outerMarginRight: null,\r\n            outerMarginBottom: null,\r\n            outerMarginLeft: null,\r\n            useTransformPositioning: true,\r\n            mobileBreakpoint: 640,\r\n            minCols: 10,\r\n            maxCols: 25,\r\n            minRows: 8,\r\n            maxRows: 25,\r\n            maxItemCols: 500,\r\n            minItemCols: 1,\r\n            maxItemRows: 500,\r\n            minItemRows: 1,\r\n            maxItemArea: 200,\r\n            minItemArea: 1,\r\n            defaultItemCols: 1,\r\n            defaultItemRows: 1,\r\n            fixedColWidth: 50,\r\n            fixedRowHeight: 50,\r\n            keepFixedHeightInMobile: false,\r\n            keepFixedWidthInMobile: false,\r\n            scrollSensitivity: 10,\r\n            scrollSpeed: 20,\r\n            enableEmptyCellClick: false,\r\n            enableEmptyCellContextMenu: false,\r\n            enableEmptyCellDrop: false,\r\n            enableEmptyCellDrag: false,\r\n            enableOccupiedCellDrop: false,\r\n            emptyCellDragMaxCols: 50,\r\n            emptyCellDragMaxRows: 50,\r\n            ignoreMarginInRow: false,\r\n            draggable: {\r\n                enabled: true,\r\n            },\r\n            resizable: {\r\n                enabled: true,\r\n            },\r\n            swap: false,\r\n            pushItems: true,\r\n            disablePushOnDrag: false,\r\n            disablePushOnResize: false,\r\n            pushDirections: { north: false, east: false, south: false, west: false },\r\n            pushResizeItems: false,\r\n            displayGrid: DisplayGrid.None,\r\n            disableWindowResize: false,\r\n            disableWarnings: false,\r\n            scrollToNewItems: false,\r\n            itemChangeCallback: DashboardContainerComponent.itemChange,\r\n            itemResizeCallback: DashboardContainerComponent.itemResize\r\n        };\r\n    }\r\n    //#region gridster static methods \r\n    static itemChange(item, itemComponent) {\r\n        console.info('itemChanged', item, itemComponent);\r\n    }\r\n    static itemResize(item, itemComponent) {\r\n        console.info('itemResized', item, itemComponent);\r\n    }\r\n    //#region gridster methods\r\n    changedOptions() {\r\n        if (this.options.api && this.options.api.optionsChanged) {\r\n            this.options.api.optionsChanged();\r\n        }\r\n    }\r\n    removeItem($event, item) {\r\n        $event.preventDefault();\r\n        $event.stopPropagation();\r\n        this.dashboard.splice(this.dashboard.indexOf(item), 1);\r\n    }\r\n    addItem() {\r\n        this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\r\n    }\r\n    openCreateDashboardDialog() {\r\n    }\r\n    AddDashboard() {\r\n        this._dashboard.charts.push(this.dashboardService.GetDefaultChartObject());\r\n        console.log('service called');\r\n    }\r\n    SaveDashboardContainer() {\r\n        /**\r\n         * creates dashboard object\r\n         * returns the object to be saved\r\n         */\r\n    }\r\n    openDialog() {\r\n        const dialogRef = this.dialog.open(AddDashboardComponent, {\r\n            data: { title: this.title, description: this.description }\r\n        });\r\n        dialogRef.afterClosed().subscribe(result => {\r\n            console.log('The dialog was closed', result);\r\n            this.title = result.title;\r\n            this.description = result.description;\r\n            this.AddDashboard();\r\n        });\r\n    }\r\n}\r\nDashboardContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DashboardContainerComponent, deps: [{ token: i1$2.Router }, { token: DashboardService }, { token: i1$1.MatDialog }], target: i0.ɵɵFactoryTarget.Component });\r\nDashboardContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.2\", type: DashboardContainerComponent, selector: \"app-dashboard-container\", ngImport: i0, template: \"<div class = \\\"top-toolbar\\\">\\r\\n  <mat-toolbar class = \\\"edit-toolbar-options\\\" color = 'basic'>\\r\\n    <div>\\r\\n      <button mat-button color = \\\"primary\\\" (click)=\\\"openDialog()\\\">\\r\\n        Add Dashboard\\r\\n      </button>\\r\\n    </div>\\r\\n  </mat-toolbar>\\r\\n</div>\\r\\n\\r\\n<div class='dashboard-container'>\\r\\n\\r\\n  <div class=\\\"gridster-grid\\\" >\\r\\n<gridster [options]=\\\"options\\\" style=\\\"background-color: rgb(227, 228, 228);\\\">\\r\\n  <gridster-item [item]=\\\"item.position\\\" *ngFor=\\\"let item of dashboardList\\\" class = \\\"gridster-item\\\">\\r\\n    <app-create-dashboard class = \\\"dashboard-item\\\"></app-create-dashboard>\\r\\n  </gridster-item>\\r\\n</gridster>\\r\\n\\r\\n</div>\\r\\n</div>\", styles: [\".dashboard-container{display:grid;grid-template-columns:auto;height:100%;background-color:#fff}.gridster-grid{height:90vh}.no-display{display:none}.top-toolbar{position:sticky;top:0;z-index:21}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:block!important;align-items:flex-start;justify-content:flex-start;height:100%;width:100%;padding:0;margin:0}#addChartIcon{transform:scale(2)}.edit-toolbar-options{justify-content:flex-end}:hover .test-class{background-color:#0ff}\\n\"], components: [{ type: i4$4.MatToolbar, selector: \"mat-toolbar\", inputs: [\"color\"], exportAs: [\"matToolbar\"] }, { type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i6.GridsterComponent, selector: \"gridster\", inputs: [\"options\"] }, { type: i6.GridsterItemComponent, selector: \"gridster-item\", inputs: [\"item\"] }, { type: CreateDashboardComponent, selector: \"app-create-dashboard\" }], directives: [{ type: i10.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DashboardContainerComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'app-dashboard-container',\r\n                    templateUrl: './dashboard-container.component.html',\r\n                    styleUrls: ['./dashboard-container.component.css']\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1$2.Router }, { type: DashboardService }, { type: i1$1.MatDialog }]; } });\n\nclass NewChartTabDirective {\r\n    constructor(viewContainerRef) {\r\n        this.viewContainerRef = viewContainerRef;\r\n    }\r\n}\r\nNewChartTabDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: NewChartTabDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nNewChartTabDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.0.2\", type: NewChartTabDirective, selector: \"[newChartTab]\", ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: NewChartTabDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[newChartTab]'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });\n\nclass ChartContainerService {\r\n    constructor() { }\r\n    DeleteSelectedChart(DeleteChartFunction) {\r\n        this.DeleteChart = DeleteChartFunction;\r\n    }\r\n}\r\nChartContainerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ChartContainerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nChartContainerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ChartContainerService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ChartContainerService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\n//this abstract class should be inherited by all the chart classes\r\nclass BaseChart {\r\n    //#endregion\r\n    // ctor\r\n    constructor() { }\r\n    get chartType() {\r\n        return this._chartType;\r\n    }\r\n    set chartType(v) {\r\n        this._chartType = v;\r\n    }\r\n    get chartId() {\r\n        return this._chartId;\r\n    }\r\n    set chartId(v) {\r\n        this._chartId = v;\r\n    }\r\n    // to get the defaults for the chart\r\n    GetDefaults() { }\r\n    // to check if data is complete wrt to the chart being used\r\n    DataComplete() { }\r\n    // to create new series for the data\r\n    CreateNewSeries(name, data) { }\r\n    CreateNewSeriesForPieChart(name, data) { }\r\n}\n\nclass BarChart extends BaseChart {\r\n    constructor(chartId, chartData) {\r\n        super();\r\n        if (chartId && chartData) {\r\n            this.chartData = chartData;\r\n        }\r\n        else {\r\n            this.chartData = this.chartData = {\r\n                series: [],\r\n                theme: {\r\n                    mode: 'light',\r\n                    palette: 'palette4',\r\n                    monochrome: {\r\n                        enabled: false,\r\n                        color: '#C7F464',\r\n                        shadeTo: 'dark',\r\n                        shadeIntensity: 0.65\r\n                    }\r\n                },\r\n                title: {\r\n                    text: \"Bar Chart\",\r\n                    align: 'left',\r\n                    margin: 10,\r\n                    offsetX: 0,\r\n                    offsetY: 0,\r\n                    floating: false,\r\n                    style: {\r\n                        fontSize: '23px',\r\n                        fontWeight: 10,\r\n                        fontFamily: 'Roboto',\r\n                        // color:  '#263238'\r\n                    },\r\n                },\r\n                chart: {\r\n                    toolbar: {\r\n                        show: false\r\n                    },\r\n                    redrawOnParentResize: true,\r\n                    redrawOnWindowResize: true,\r\n                    type: \"bar\",\r\n                    height: '100%'\r\n                },\r\n                plotOptions: {\r\n                    bar: {\r\n                        horizontal: false\r\n                    }\r\n                },\r\n                grid: {\r\n                    xaxis: {\r\n                        lines: {\r\n                            show: true\r\n                        }\r\n                    },\r\n                    yaxis: {\r\n                        lines: {\r\n                            show: false\r\n                        }\r\n                    }\r\n                },\r\n                stroke: {},\r\n                dataLabels: {\r\n                    enabled: false\r\n                },\r\n                xaxis: {\r\n                    categories: []\r\n                }\r\n            };\r\n        }\r\n        this.chartId = chartId;\r\n        this.chartType = \"Bar\";\r\n        // init series data\r\n        this.seriesData = {\r\n            name: \"\",\r\n            data: []\r\n        };\r\n    }\r\n    GetDefaults() {\r\n        return this.chartData;\r\n    }\r\n    DataComplete() {\r\n    }\r\n    CreateNewSeries(name, data) {\r\n        this.seriesData.name = name;\r\n        this.seriesData.data = data;\r\n        return this.seriesData;\r\n    }\r\n}\n\n// class for defining the behavior and rules for the given chart type\r\nclass PieChart extends BaseChart {\r\n    constructor(chartId, chartData) {\r\n        super();\r\n        if (chartId && chartData) {\r\n            this.chartData = chartData;\r\n        }\r\n        else {\r\n            this.chartData = {\r\n                title: {\r\n                    text: \"Pie Chart\",\r\n                    align: 'left',\r\n                    margin: 10,\r\n                    offsetX: 0,\r\n                    offsetY: 0,\r\n                    floating: false,\r\n                    style: {\r\n                        fontSize: '23px',\r\n                        fontWeight: 10,\r\n                        fontFamily: 'Roboto',\r\n                        color: '#263238'\r\n                    },\r\n                },\r\n                series: [],\r\n                chart: {\r\n                    height: \"100%\",\r\n                    type: \"pie\",\r\n                    redrawOnParentResize: true,\r\n                },\r\n                labels: [],\r\n            };\r\n        }\r\n        this.chartType = \"Pie\";\r\n        this.chartId = chartId; // unique chart id should be generated for each chart\r\n        this.seriesData = {\r\n            name: \"\",\r\n            data: []\r\n        };\r\n    }\r\n    GetDefaults() {\r\n        return this.chartData;\r\n    }\r\n    DataComplete() {\r\n    }\r\n    CreateNewSeries(name, data) {\r\n        this.seriesData.name = name;\r\n        this.seriesData.data = data;\r\n        return this.seriesData;\r\n    }\r\n}\n\nclass LineChart extends BaseChart {\r\n    constructor(chartId, chartData) {\r\n        super();\r\n        if (chartId && chartData) {\r\n            this.chartData = chartData;\r\n        }\r\n        else {\r\n            this.chartData = this.chartData = {\r\n                series: [],\r\n                title: {\r\n                    text: \"Line Chart\",\r\n                    align: 'left',\r\n                    margin: 10,\r\n                    offsetX: 0,\r\n                    offsetY: 0,\r\n                    floating: false,\r\n                    style: {\r\n                        fontSize: '23px',\r\n                        fontWeight: 10,\r\n                        fontFamily: 'Roboto',\r\n                        color: '#263238'\r\n                    },\r\n                },\r\n                chart: {\r\n                    toolbar: {\r\n                        show: false\r\n                    },\r\n                    height: \"100%\",\r\n                    type: \"line\",\r\n                    redrawOnParentResize: true,\r\n                    redrawOnWindowResize: true,\r\n                    zoom: {\r\n                        enabled: false\r\n                    }\r\n                },\r\n                dataLabels: {\r\n                    enabled: false\r\n                },\r\n                stroke: {\r\n                    curve: \"straight\"\r\n                },\r\n                grid: {\r\n                    row: {\r\n                        colors: [\"#f3f3f3\", \"transparent\"],\r\n                        opacity: 0.5\r\n                    }\r\n                },\r\n                xaxis: {\r\n                    categories: []\r\n                }\r\n            };\r\n        }\r\n        this.chartId = chartId;\r\n        this.chartType = \"Line\";\r\n    }\r\n    GetDefaults() {\r\n        return this.chartData;\r\n    }\r\n}\n\n// class for chart setup component\r\nclass ChartSetup {\r\n    //#region properties\r\n    //#endregion\r\n    constructor(dataHandler) {\r\n        this.dataHandler = dataHandler;\r\n        // init charts to handle different charts\r\n        this.barChart = new BarChart();\r\n        this.pieChart = new PieChart();\r\n        this.lineChart = new LineChart();\r\n    }\r\n    //#region functions related to series\r\n    // functionality changes wrt to type of graph should be handled here \r\n    // to get series available as input for the chart\r\n    GetSeriesName() {\r\n        return this.dataHandler.GetHeaders();\r\n    }\r\n    // to get data for a series based on series name \r\n    GetSeriesData(chartType, dataType, name) {\r\n        return this.dataHandler.GetHeaderValue(chartType, dataType, name);\r\n    }\r\n    // to create category data used by chart-setup component\r\n    CreateCategoryData(categoryName, categoryData) {\r\n        var category = {\r\n            name: categoryName,\r\n            data: categoryData\r\n        };\r\n        return category;\r\n    }\r\n}\n\n/**\r\n * class for KPI component\r\n */\r\nclass KPI {\r\n    //#endregion\r\n    constructor(metricName, metricQuantity, metricIcon) {\r\n        this._metricName = metricName;\r\n        this._metricQuantity = metricQuantity;\r\n        this._metricIcon = metricIcon;\r\n    }\r\n    get metricQuantity() {\r\n        return this._metricQuantity;\r\n    }\r\n    get metricName() {\r\n        return this._metricName;\r\n    }\r\n    get metricIcon() {\r\n        return this._metricIcon;\r\n    }\r\n}\n\nclass DataHandlerService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.data = `[\r\n      {\r\n        \"Country\": \"Colombia\",\r\n        \"Id\": 1,\r\n        \"CreatedOn\": \"12/13/2011\",\r\n        \"Population\": 50415,\r\n        \"Metric\" : 60000\r\n      },\r\n      {\r\n        \"Country\": \"Rwanda\",\r\n        \"Id\": 2,\r\n        \"CreatedOn\": \"01/18/2011\",\r\n        \"Population\": 19070,\r\n        \"Metric\" : 60000\r\n      },\r\n      {\r\n        \"Country\": \"Uganda\",\r\n        \"Id\": 3,\r\n        \"CreatedOn\": \"12/27/2003\",\r\n        \"Population\": 25892,\r\n        \"Metric\" : 60000\r\n      },\r\n      {\r\n        \"Country\": \"Senegal\",\r\n        \"Id\": 4,\r\n        \"CreatedOn\": \"05/23/2022\",\r\n        \"Population\": 52150,\r\n        \"Metric\" : 60000\r\n      },\r\n      {\r\n        \"Country\": \"Benin\",\r\n        \"Id\": 5,\r\n        \"CreatedOn\": \"06/19/2018\",\r\n        \"Population\": 86003,\r\n        \"Metric\" : 60000\r\n      },\r\n      {\r\n        \"Country\": \"Korea, North\",\r\n        \"Id\": 6,\r\n        \"CreatedOn\": \"05/21/2021\",\r\n        \"Population\": 95054,\r\n        \"Metric\" : 60000\r\n      },\r\n      {\r\n        \"Country\": \"Virgin Islands, British\",\r\n        \"Id\": 7,\r\n        \"CreatedOn\": \"04/24/2018\",\r\n        \"Population\": 36511,\r\n        \"Metric\" : 60000\r\n      },\r\n      {\r\n        \"Country\": \"Seychelles\",\r\n        \"Id\": 8,\r\n        \"CreatedOn\": \"06/21/2007\",\r\n        \"Population\": 39741,\r\n        \"Metric\" : 60000\r\n      },\r\n      {\r\n        \"Country\": \"Lebanon\",\r\n        \"Id\": 9,\r\n        \"CreatedOn\": \"07/18/2012\",\r\n        \"Population\": 75397,\r\n        \"Metric\" : 60000\r\n      },\r\n      {\r\n        \"Country\": \"Swaziland\",\r\n        \"Id\": 10,\r\n        \"CreatedOn\": \"10/24/2021\",\r\n        \"Population\": 74968,\r\n        \"Metric\" : 60000\r\n      }\r\n    ]`;\r\n        var rowObject;\r\n        this.http.get('http://localhost:3000/sheetdata/').subscribe(rowData => {\r\n            rowObject = rowData;\r\n            this.data_new = rowObject.rows;\r\n        });\r\n    }\r\n    GetHeaders_() {\r\n        var dummyData = JSON.parse(this.data);\r\n        console.log(Object.keys(dummyData[0]));\r\n        return Object.keys(dummyData[0]);\r\n    }\r\n    GetHeaders() {\r\n        return this.http.get('http://localhost:3000/header/all');\r\n        // .subscribe(res => {\r\n        //   headersObject = res\r\n        //   if(headersObject != null){\r\n        //     return headers = headersObject.headers\r\n        //   }\r\n        // },error => {\r\n        //   console.log(error);\r\n        // })\r\n    }\r\n    GetHeaderValue(chartType, dataType, keyName) {\r\n        // var url = 'http://localhost:3000/header/?name=' + keyName;\r\n        debugger;\r\n        // return this.http.get(url)\r\n        var values = [];\r\n        this.data_new.forEach(row => {\r\n            values.push(row[keyName]);\r\n        }, this);\r\n        return values;\r\n    }\r\n}\r\nDataHandlerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DataHandlerService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\r\nDataHandlerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DataHandlerService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DataHandlerService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\n\nclass ChartSetupComponent {\r\n    //#endregion\r\n    constructor(chartData, dataHandler) {\r\n        this.chartData = chartData;\r\n        this.dataHandler = dataHandler;\r\n        this.panelOpenState = true;\r\n        this.updatedSeriesOption = [''];\r\n        this.updatedCategoryOption = [''];\r\n        this.chartSetup = new ChartSetup(this.dataHandler);\r\n    }\r\n    ngOnInit() {\r\n        this.barChart = new BarChart();\r\n        this.pieChart = new PieChart();\r\n        this.lineChart = new LineChart();\r\n        this.chartData.editorData_current.subscribe(_chartObject => {\r\n            this.Reset();\r\n            this.LoadData(_chartObject);\r\n        });\r\n        this.Reset();\r\n        this.chartTypesList = [\"Bar\", \"Line\", \"Pie\"];\r\n        this.seriesNames = [\"null\"];\r\n        this.categoryNames = [\"null\"];\r\n    }\r\n    DeleteSeries(deletedSeries) {\r\n        this.seriesList = this.seriesList.filter(series => series !== deletedSeries);\r\n        this._chartSetupData.series.pop(deletedSeries);\r\n        this._chartObject.chartData = this._chartSetupData;\r\n        this.chartData.EditorDataUpdated(this._chartObject);\r\n    }\r\n    DeleteCategory(deletedCategory) {\r\n        this.availableCategoryNames = this.availableCategoryNames.filter(category => category !== deletedCategory);\r\n        this._chartSetupData.xaxis.categories.pop(deletedCategory);\r\n        this._chartObject.chartData = this._chartSetupData;\r\n        this.chartData.EditorDataUpdated(this._chartObject);\r\n    }\r\n    DeleteLabel(deletedLabel) {\r\n        this.availableLabelNames = this.availableLabelNames.filter(label => label !== deletedLabel);\r\n        this._chartSetupData.label.pop(deletedLabel);\r\n        this._chartObject.chartData = this._chartSetupData;\r\n        this.chartData.EditorDataUpdated(this._chartObject);\r\n    }\r\n    /**\r\n     * initialize the lists as empty\r\n     */\r\n    Reset() {\r\n        this.seriesList = [];\r\n        this.categoryList = [];\r\n        this.labelList = [];\r\n    }\r\n    // updates the component UI\r\n    UpdateChartSetup() {\r\n        let headersObject;\r\n        this.chartSetup.GetSeriesName().subscribe(res => {\r\n            headersObject = res;\r\n            this.seriesNames = this.categoryNames = this.availableLabelNames = this.labelNames = headersObject.headers;\r\n        });\r\n    }\r\n    EnterSubmit(event, form) {\r\n        if (event.keyCode == 13) {\r\n            this._chartObject.Defaults = this._chartSetupData;\r\n            this.chartData.EditorDataUpdated(this._chartObject);\r\n        }\r\n    }\r\n    /**updates:\r\n     * data lists\r\n     * chart data\r\n     */\r\n    ChartInit(chartData) {\r\n        if (chartData.series) {\r\n            if (chartData != null) {\r\n                this.UpdateSeriesList(chartData);\r\n            }\r\n        }\r\n        if (chartData.xaxis && chartData.xaxis.categories) {\r\n            this.availableCategoryNames = [];\r\n            if (chartData.xaxis.categories.length != 0) {\r\n                var category = this.chartSetup.CreateCategoryData(\"cat-1\", chartData.xaxis.categories);\r\n                this.availableCategoryNames.push(category);\r\n            }\r\n        }\r\n        if (chartData.labels) {\r\n            this.labelList.push(...chartData.labels);\r\n        }\r\n        this._chartSetupData = chartData;\r\n    }\r\n    /**\r\n     * to set the seriesList (different for different chart types)\r\n     * @param chartData chart data\r\n     */\r\n    UpdateSeriesList(chartData) {\r\n        if (chartData.chart.type.toUpperCase() == this.barChart.chartType.toUpperCase()\r\n            || chartData.chart.type.toUpperCase() == this.lineChart.chartType.toUpperCase()) {\r\n            this.seriesList.push(...chartData.series);\r\n        }\r\n        else if (chartData.chartType.toUpperCase() == this.pieChart.chartType.toUpperCase()) {\r\n            let dataToPush = {\r\n                name: this.addedSeries.name,\r\n                data: this.addedSeries.data\r\n            };\r\n            dataToPush.data = chartData.series;\r\n            // TODO: Harcoding here, Pie object does not contain series object @pall97\r\n            dataToPush.name = 'Teams';\r\n            this.seriesList.push(dataToPush);\r\n        }\r\n    }\r\n    /**\r\n     * function to update an orginal field(category/series) with selected one\r\n     * @param updated updated field value\r\n     * @param original original field value\r\n     * @param fieldType type of field value (....can be series, category..)\r\n     */\r\n    UpdateField(updated, original, fieldType) {\r\n        if (fieldType == \"series\" || fieldType == \"category\") {\r\n            this.DeleteSeries(original);\r\n            this.AddData(updated, fieldType);\r\n        }\r\n        else if (fieldType == \"label\") {\r\n        }\r\n    }\r\n    LoadData(chartObject) {\r\n        //load data from connected DB \r\n        this.UpdateChartSetup();\r\n        if (chartObject) {\r\n            if (chartObject.chartType == \"Bar\") {\r\n                let _barChart = chartObject;\r\n                let _chartData = _barChart.chartData;\r\n                this.ChartInit(_chartData);\r\n            }\r\n            else if (chartObject.chartType == \"Pie\") {\r\n                let _pieChart = chartObject;\r\n                let _chartData = _pieChart.chartData;\r\n                this.ChartInit(_chartData);\r\n            }\r\n            else if (chartObject.chartType == \"Line\") {\r\n                let _lineChart = chartObject;\r\n                let _chartData = _lineChart.chartData;\r\n                this.ChartInit(_chartData);\r\n            }\r\n            this._chartObject = chartObject;\r\n        }\r\n    }\r\n    AddData(dataTypeName, dataType) {\r\n        /**\r\n         * adds series/category to the ui\r\n         * adds series/category to the chartData object\r\n         */\r\n        // default case\r\n        if (dataTypeName == \"null\") {\r\n            alert(\"need to add data file\");\r\n        }\r\n        else {\r\n            var seriesData = this.chartSetup.GetSeriesData(this._chartObject.chartType, dataType, dataTypeName);\r\n            this.addedSeries = this.barChart.CreateNewSeries(dataTypeName, seriesData);\r\n            // to prevent call by reference\r\n            let dataToPush = {\r\n                name: this.addedSeries.name,\r\n                data: this.addedSeries.data\r\n            };\r\n            if (dataType == 'series') {\r\n                this.seriesList.push(dataToPush);\r\n                this._chartSetupData.series.push(dataToPush);\r\n                if (this._chartObject.chartType == \"Pie\") {\r\n                    this._chartSetupData.series = dataToPush.data;\r\n                    this.seriesList.push(dataToPush);\r\n                }\r\n            }\r\n            else if (dataType == 'category') {\r\n                this._chartSetupData.xaxis.categories = dataToPush.data;\r\n                this.categoryList.push(dataToPush);\r\n                // this.availableCategoryNames.push(dataToPush.name)\r\n            }\r\n            else if (dataType == 'label') {\r\n                this._chartSetupData.labels = dataToPush.data;\r\n                this.labelList.push(dataToPush);\r\n                this.availableLabelNames.push(dataToPush.name);\r\n            }\r\n        }\r\n        // update seriesList UI\r\n        // update setup data\r\n        // update chart\r\n        this._chartObject.chartData = this._chartSetupData;\r\n        this.chartData.EditorDataUpdated(this._chartObject);\r\n    }\r\n    SaveChartData() {\r\n        /**\r\n         * saves chartData to DB\r\n         */\r\n    }\r\n}\r\nChartSetupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ChartSetupComponent, deps: [{ token: ChartEditorService }, { token: DataHandlerService }], target: i0.ɵɵFactoryTarget.Component });\r\nChartSetupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.2\", type: ChartSetupComponent, selector: \"app-chart-setup\", ngImport: i0, template: \"    <mat-accordion>\\r\\n        <form #myForm = \\\"ngForm\\\" (keydown) = \\\"EnterSubmit($event, myForm.form)\\\">\\r\\n\\r\\n            <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\" *ngIf=\\\"_chartSetupData && _chartSetupData.title\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                    Chart Title\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <mat-form-field>\\r\\n                    <input matInput type=\\\"text\\\" [(ngModel)]=\\\"_chartSetupData.title.text\\\" [ngModelOptions]=\\\"{standalone : true}\\\">\\r\\n                    <button mat-button *ngIf=\\\"_chartSetupData && _chartSetupData.title.text\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"_chartSetupData.title.text=''\\\">\\r\\n                    <mat-icon>close</mat-icon>\\r\\n                    </button>\\r\\n                </mat-form-field>                    \\r\\n            </mat-expansion-panel>\\r\\n\\r\\n            <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                    Chart Type\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header> \\r\\n                <mat-selection-list [multiple]=\\\"false\\\" >\\r\\n                    <mat-list-option *ngFor=\\\"let item of chartTypesList\\\" aria-label=\\\"Select an option\\\" >{{item}}</mat-list-option>\\r\\n                </mat-selection-list>\\r\\n            </mat-expansion-panel>\\r\\n\\r\\n            <!-- X-axis category -->\\r\\n            <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\" *ngIf=\\\"_chartSetupData && _chartSetupData.xaxis\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        X Axis\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                \\r\\n                <div style=\\\"margin-bottom: 10px;\\\">\\r\\n                    <button mat-button  [matMenuTriggerFor]=\\\"menu\\\">\\r\\n                        <mat-icon>add_circle</mat-icon>\\r\\n                        Category\\r\\n                    </button>\\r\\n                </div>\\r\\n\\r\\n                <div *ngFor=\\\"let category of availableCategoryNames\\\">\\r\\n                    <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\" >\\r\\n                        <!-- header -->\\r\\n                        <mat-expansion-panel-header>\\r\\n                            <div class=\\\"label-header\\\">\\r\\n                                <div>\\r\\n                                    <button mat-icon-button (click) = 'DeleteCategory(category)'>\\r\\n                                        <mat-icon>delete</mat-icon>\\r\\n                                    </button>\\r\\n                                </div>\\r\\n                                <div>\\r\\n                                    Category: {{category.name}}\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <!-- <mat-icon>delete</mat-icon> -->\\r\\n                        </mat-expansion-panel-header>\\r\\n                        \\r\\n                        <!-- content -->\\r\\n                        <mat-selection-list #categorySelectionList [(ngModel)]=\\\"updatedCategoryOption\\\" (ngModelChange)=\\\"UpdateField($event, category,'category')\\\" [multiple]=\\\"false\\\" [ngModelOptions]=\\\"{standalone : true}\\\">\\r\\n                            <mat-list-option *ngFor=\\\"let option of categoryNames\\\" [value]=\\\"option\\\">\\r\\n                            {{option}}\\r\\n                        </mat-list-option>\\r\\n                        </mat-selection-list>\\r\\n\\r\\n                    </mat-expansion-panel>\\r\\n                </div>\\r\\n\\r\\n                <mat-menu #menu=\\\"matMenu\\\">\\r\\n                    <div *ngFor=\\\"let item of categoryNames\\\">\\r\\n                        <button mat-menu-item (click) = \\\"AddData(item,'category')\\\">\\r\\n                            <mat-icon>playlist_add</mat-icon>{{item}} \\r\\n                        </button>\\r\\n                    </div>\\r\\n                </mat-menu>                  \\r\\n            </mat-expansion-panel>\\r\\n\\r\\n            <!-- Series -->\\r\\n            <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                    Series\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n\\r\\n                <button mat-button  [matMenuTriggerFor]=\\\"seriesMenu\\\" style=\\\"margin-bottom: 10px;\\\">\\r\\n                    <mat-icon>add_circle</mat-icon>\\r\\n                    Series\\r\\n                </button>\\r\\n\\r\\n                <div *ngFor=\\\"let series of seriesList\\\">\\r\\n                    <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\" >\\r\\n                        <!-- header -->\\r\\n                        <mat-expansion-panel-header>\\r\\n                            <div class=\\\"label-header\\\">\\r\\n                                <button mat-icon-button (click) = 'DeleteSeries(series)'>\\r\\n                                    <mat-icon>delete</mat-icon>\\r\\n                                </button>\\r\\n                                <div>\\r\\n                                    Series : {{series.name}}\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </mat-expansion-panel-header>\\r\\n\\r\\n                        <!-- content -->\\r\\n                        <mat-selection-list #seriesSelectionList [(ngModel)]=\\\"updatedSeriesOption\\\" (ngModelChange)=\\\"UpdateField($event, series,'series')\\\" [multiple]=\\\"false\\\" [ngModelOptions]=\\\"{standalone : true}\\\">\\r\\n                            <mat-list-option *ngFor=\\\"let option of seriesNames\\\" [value]=\\\"option\\\">\\r\\n                            {{option}}\\r\\n                            </mat-list-option>\\r\\n                        </mat-selection-list>\\r\\n\\r\\n                    </mat-expansion-panel>\\r\\n\\r\\n                </div>\\r\\n\\r\\n                <mat-menu #seriesMenu=\\\"matMenu\\\">\\r\\n                    <div *ngFor=\\\"let item of seriesNames\\\">\\r\\n                        <button mat-menu-item (click) = \\\"AddData(item,'series')\\\">\\r\\n                            <mat-icon>playlist_add</mat-icon>{{item}} \\r\\n                        </button>\\r\\n                    </div>\\r\\n                </mat-menu>                  \\r\\n            </mat-expansion-panel>\\r\\n\\r\\n            <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                    Labels\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>  \\r\\n                <button mat-button  [matMenuTriggerFor]=\\\"labelMenu\\\">\\r\\n                    <mat-icon>add_circle</mat-icon>\\r\\n                    Labels\\r\\n                    </button>\\r\\n                    <div *ngFor=\\\"let label of labelList\\\">\\r\\n                        <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\" *ngIf=\\\"_chartSetupData && _chartSetupData.labels\\\">\\r\\n                            <mat-expansion-panel-header>\\r\\n                                <mat-panel-title class = \\\"delete-labels\\\"> \\r\\n                                        <button mat-button (click) = 'DeleteLabel(label)'>\\r\\n                                            <mat-icon>delete</mat-icon>\\r\\n                                        </button>\\r\\n                                        Label : {{label}}\\r\\n                                </mat-panel-title>\\r\\n                            </mat-expansion-panel-header>\\r\\n                        </mat-expansion-panel>\\r\\n                    </div>\\r\\n                    <mat-menu #labelMenu=\\\"matMenu\\\">\\r\\n                        <div *ngFor=\\\"let item of labelNames\\\">\\r\\n                            <button mat-menu-item (click) = \\\"AddData(item,'label')\\\">\\r\\n                                <mat-icon>playlist_add</mat-icon>{{item}} \\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </mat-menu>                  \\r\\n            </mat-expansion-panel>\\r\\n            \\r\\n        </form>\\r\\n    </mat-accordion>\", styles: [\".mat-radio-button~.mat-radio-button{margin-left:16px}.label-header{display:flex;flex-direction:row;align-items:center}\\n\"], components: [{ type: i3$1.MatExpansionPanel, selector: \"mat-expansion-panel\", inputs: [\"disabled\", \"expanded\", \"hideToggle\", \"togglePosition\"], outputs: [\"opened\", \"closed\", \"expandedChange\", \"afterExpand\", \"afterCollapse\"], exportAs: [\"matExpansionPanel\"] }, { type: i3$1.MatExpansionPanelHeader, selector: \"mat-expansion-panel-header\", inputs: [\"expandedHeight\", \"collapsedHeight\"] }, { type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"floatLabel\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i4$2.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { type: i7.MatSelectionList, selector: \"mat-selection-list\", inputs: [\"disableRipple\", \"tabIndex\", \"color\", \"compareWith\", \"disabled\", \"multiple\"], outputs: [\"selectionChange\"], exportAs: [\"matSelectionList\"] }, { type: i7.MatListOption, selector: \"mat-list-option\", inputs: [\"disableRipple\", \"checkboxPosition\", \"color\", \"value\", \"selected\", \"disabled\"], exportAs: [\"matListOption\"] }, { type: i8.MatMenu, selector: \"mat-menu\", exportAs: [\"matMenu\"] }, { type: i8.MatMenuItem, selector: \"[mat-menu-item]\", inputs: [\"disabled\", \"disableRipple\", \"role\"], exportAs: [\"matMenuItem\"] }], directives: [{ type: i3$1.MatAccordion, selector: \"mat-accordion\", inputs: [\"multi\", \"displayMode\", \"togglePosition\", \"hideToggle\"], exportAs: [\"matAccordion\"] }, { type: i2.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i2.NgForm, selector: \"form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]\", inputs: [\"ngFormOptions\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i10.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3$1.MatExpansionPanelTitle, selector: \"mat-panel-title\" }, { type: i4$1.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"id\", \"disabled\", \"required\", \"type\", \"value\", \"readonly\", \"placeholder\", \"errorStateMatcher\", \"aria-describedby\"], exportAs: [\"matInput\"] }, { type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i4.MatSuffix, selector: \"[matSuffix]\" }, { type: i10.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i8.MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", inputs: [\"matMenuTriggerRestoreFocus\", \"mat-menu-trigger-for\", \"matMenuTriggerFor\", \"matMenuTriggerData\"], outputs: [\"menuOpened\", \"onMenuOpen\", \"menuClosed\", \"onMenuClose\"], exportAs: [\"matMenuTrigger\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ChartSetupComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'app-chart-setup',\r\n                    templateUrl: './chart-setup.component.html',\r\n                    styleUrls: ['./chart-setup.component.css']\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: ChartEditorService }, { type: DataHandlerService }]; } });\n\nclass ChartCustomizerComponent {\r\n    constructor(chartEditorService, fb) {\r\n        this.chartEditorService = chartEditorService;\r\n        this.fb = fb;\r\n        this.ChartInit();\r\n        this.ChartOptionsForm = fb.group({\r\n            showXAxisLines: false,\r\n            showYAxisLines: false,\r\n            chartHeight: 0,\r\n            showDataLabels: false,\r\n            showStroke: false,\r\n            strokeWidth: 0,\r\n            chartWidth: 0\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        this.panelOpenState = false;\r\n        this.optionsVisible = true;\r\n        this.chartEditorService.editorData_current.subscribe(chartObject => {\r\n            if (chartObject) {\r\n                this._chartObject = chartObject;\r\n                this._chartData = chartObject.chartData;\r\n                //update form values\r\n                this.ChartOptionsForm.patchValue(this.CreateChartOptionsFormObject(this._chartObject.chartType), { emitEvent: false });\r\n            }\r\n        });\r\n        //subscribe to form value change event\r\n        this.OnFormUpdate();\r\n    }\r\n    CreateChartOptionsFormObject(chartType) {\r\n        var _a, _b, _c, _d;\r\n        if (chartType.toLowerCase() == 'bar') {\r\n            return {\r\n                showXAxisLines: this._chartData.grid.xaxis.lines.show,\r\n                showYAxisLines: this._chartData.grid.yaxis.lines.show,\r\n                chartHeight: this._chartData.chart.height,\r\n                showDataLabels: this._chartData.dataLabels.enabled,\r\n                showStroke: (_a = this._chartData.stroke.show) !== null && _a !== void 0 ? _a : false,\r\n                strokeWidth: (_b = this._chartData.stroke.width) !== null && _b !== void 0 ? _b : 0\r\n            };\r\n        }\r\n        else if (chartType.toLowerCase() == 'line') {\r\n            return {\r\n                chartHeight: this._chartData.chart.height,\r\n                showDataLabels: this._chartData.dataLabels.enabled,\r\n                showStroke: (_c = this._chartData.stroke.show) !== null && _c !== void 0 ? _c : false,\r\n                strokeWidth: (_d = this._chartData.stroke.width) !== null && _d !== void 0 ? _d : 0\r\n            };\r\n        }\r\n        else if (chartType.toLowerCase() == 'pie') {\r\n            return {\r\n                chartWidth: this._chartData.chart.width\r\n            };\r\n        }\r\n    }\r\n    OnFormUpdate() {\r\n        this.ChartOptionsForm.valueChanges.subscribe(formValues => {\r\n            //update chart options\r\n            this.UpdateChartOptions(formValues);\r\n            //emit chart options\r\n            this._chartObject.chartData = this._chartData;\r\n            this.chartEditorService.EditorDataUpdated(this._chartObject);\r\n        });\r\n    }\r\n    UpdateChartOptions(formValues) {\r\n        if (this._chartObject.chartType.toLowerCase() == 'bar') {\r\n            //grid\r\n            this._chartData.grid.xaxis.lines.show = formValues.showXAxisLines;\r\n            this._chartData.grid.yaxis.lines.show = formValues.showYAxisLines;\r\n            //stroke\r\n            this._chartData.stroke.show = formValues.showStroke;\r\n            this._chartData.stroke.width = formValues.strokeWidth;\r\n            this._chartData.dataLabels.enabled = formValues.showDataLabels;\r\n            this._chartData.chart.height = formValues.chartHeight;\r\n        }\r\n        else if (this._chartObject.chartType.toLowerCase() == 'line') {\r\n            this._chartData.stroke.show = formValues.showStroke;\r\n            this._chartData.stroke.width = formValues.strokeWidth;\r\n            this._chartData.dataLabels.enabled = formValues.showDataLabels;\r\n            this._chartData.chart.height = formValues.chartHeight;\r\n        }\r\n        else if (this._chartObject.chartType.toLowerCase() == 'pie') {\r\n            this._chartData.chart.width = formValues.chartWidth;\r\n        }\r\n    }\r\n    ChartInit() {\r\n        this._chartData = {\r\n            chart: {\r\n                type: \"bar\",\r\n                height: \"0\"\r\n            },\r\n            grid: {\r\n                xaxis: {\r\n                    lines: {\r\n                        show: false\r\n                    }\r\n                },\r\n                yaxis: {\r\n                    lines: {\r\n                        show: false\r\n                    }\r\n                }\r\n            },\r\n            dataLabels: {\r\n                enabled: false\r\n            },\r\n            stroke: {\r\n                show: false,\r\n                width: 0\r\n            }\r\n        };\r\n    }\r\n}\r\nChartCustomizerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ChartCustomizerComponent, deps: [{ token: ChartEditorService }, { token: i2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });\r\nChartCustomizerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.2\", type: ChartCustomizerComponent, selector: \"app-chart-customizer\", ngImport: i0, template: \"<mat-accordion *ngIf=\\\"_chartData\\\" >\\r\\n\\r\\n  <form [formGroup] = \\\"ChartOptionsForm\\\">\\r\\n  <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\">\\r\\n      <mat-expansion-panel-header>\\r\\n          <mat-panel-title>\\r\\n          Chart Style\\r\\n          </mat-panel-title>\\r\\n      </mat-expansion-panel-header> \\r\\n      <div *ngIf=\\\"_chartData.chart.height\\\">\\r\\n        <label for=\\\"chartHeight\\\">Chart Height:</label>\\r\\n        <mat-slider min=\\\"100\\\" max=\\\"1000\\\" step=\\\"10\\\" name = \\\"chartHeight\\\"\\r\\n        [(value)] = \\\"_chartData.chart.height\\\"\\r\\n        formControlName = \\\"chartHeight\\\"\\r\\n        #sliderHeight>\\r\\n        </mat-slider>\\r\\n        <span>{{sliderHeight.value}}</span>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"!_chartData.chart.height\\\">\\r\\n      <label for=\\\"chartWidth\\\">Chart Width:</label>\\r\\n      <mat-slider min=\\\"100\\\" max=\\\"1000\\\" step=\\\"10\\\" name = \\\"chartWidth\\\"\\r\\n      [(value)] = \\\"_chartData.chart.width\\\"\\r\\n      formControlName = \\\"chartWidth\\\"\\r\\n      #sliderWidth\\r\\n      ></mat-slider>\\r\\n    </div>\\r\\n  </mat-expansion-panel>\\r\\n\\r\\n  <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\" *ngIf=\\\"_chartData.grid\\\">\\r\\n      <mat-expansion-panel-header>\\r\\n          <mat-panel-title>\\r\\n          Grid\\r\\n          </mat-panel-title>\\r\\n      </mat-expansion-panel-header>                    \\r\\n      <mat-checkbox name = \\\"gridXLines\\\" formControlName = \\\"showXAxisLines\\\" *ngIf=\\\"_chartData.grid.xaxis\\\">x-Axis</mat-checkbox>&#160;\\r\\n      <mat-checkbox name = \\\"gridYLines\\\" formControlName= \\\"showYAxisLines\\\" *ngIf=\\\"_chartData.grid.yaxis\\\">y-Axis</mat-checkbox>&#160;\\r\\n  </mat-expansion-panel>\\r\\n\\r\\n  <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\" *ngIf=\\\"_chartData.dataLabels\\\">\\r\\n      <mat-expansion-panel-header>\\r\\n          <mat-panel-title>\\r\\n          Data Labels\\r\\n          </mat-panel-title>\\r\\n      </mat-expansion-panel-header>                    \\r\\n      <mat-checkbox name = \\\"dataLabels\\\" formControlName=\\\"showDataLabels\\\">Display</mat-checkbox>\\r\\n  </mat-expansion-panel>\\r\\n\\r\\n  <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\" *ngIf=\\\"_chartData.stroke\\\">\\r\\n      <mat-expansion-panel-header>\\r\\n          <mat-panel-title>\\r\\n          Stroke\\r\\n          </mat-panel-title>\\r\\n      </mat-expansion-panel-header>                    \\r\\n      <mat-checkbox name = \\\"strokeShow\\\" formControlName=\\\"showStroke\\\">Display stroke</mat-checkbox>\\r\\n      <br>\\r\\n      <label for=\\\"strokeWidth\\\">Stroke Width</label>\\r\\n      <mat-slider min=\\\"0\\\" max=\\\"5\\\" step=\\\"0.2\\\" name = \\\"strokeWidth\\\" formControlName=\\\"strokeWidth\\\"></mat-slider>\\r\\n  </mat-expansion-panel>\\r\\n  </form>\\r\\n</mat-accordion>\", styles: [\"\"], components: [{ type: i3$1.MatExpansionPanel, selector: \"mat-expansion-panel\", inputs: [\"disabled\", \"expanded\", \"hideToggle\", \"togglePosition\"], outputs: [\"opened\", \"closed\", \"expandedChange\", \"afterExpand\", \"afterCollapse\"], exportAs: [\"matExpansionPanel\"] }, { type: i3$1.MatExpansionPanelHeader, selector: \"mat-expansion-panel-header\", inputs: [\"expandedHeight\", \"collapsedHeight\"] }, { type: i4$5.MatSlider, selector: \"mat-slider\", inputs: [\"disabled\", \"color\", \"tabIndex\", \"invert\", \"max\", \"min\", \"value\", \"step\", \"thumbLabel\", \"tickInterval\", \"vertical\", \"displayWith\", \"valueText\"], outputs: [\"change\", \"input\", \"valueChange\"], exportAs: [\"matSlider\"] }, { type: i5.MatCheckbox, selector: \"mat-checkbox\", inputs: [\"disableRipple\", \"color\", \"tabIndex\", \"aria-label\", \"aria-labelledby\", \"id\", \"labelPosition\", \"name\", \"required\", \"checked\", \"disabled\", \"indeterminate\", \"aria-describedby\", \"value\"], outputs: [\"change\", \"indeterminateChange\"], exportAs: [\"matCheckbox\"] }], directives: [{ type: i10.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3$1.MatAccordion, selector: \"mat-accordion\", inputs: [\"multi\", \"displayMode\", \"togglePosition\", \"hideToggle\"], exportAs: [\"matAccordion\"] }, { type: i2.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i3$1.MatExpansionPanelTitle, selector: \"mat-panel-title\" }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.FormControlName, selector: \"[formControlName]\", inputs: [\"disabled\", \"formControlName\", \"ngModel\"], outputs: [\"ngModelChange\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ChartCustomizerComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'app-chart-customizer',\r\n                    templateUrl: './chart-customizer.component.html',\r\n                    styleUrls: ['./chart-customizer.component.css']\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: ChartEditorService }, { type: i2.FormBuilder }]; } });\n\nclass ChartEditorComponent {\r\n    constructor(chartEditorService) {\r\n        this.chartEditorService = chartEditorService;\r\n    }\r\n    get stateName() {\r\n        return this.isEditorOpen ? 'show' : 'hide';\r\n    }\r\n    ngOnInit() {\r\n        //subscripton to chartEditor service\r\n        this.chartEditorService.isEditorOpen_current.subscribe(_editorState => {\r\n            this.editorState = _editorState;\r\n            this.isEditorOpen = _editorState[0];\r\n        });\r\n    }\r\n    closeEditor() {\r\n        this.isEditorOpen = !this.isEditorOpen;\r\n        //TODO handle chartID in case when editor is close via close button\r\n        this.chartEditorService.ToggleEditor(this.isEditorOpen, \"-999\");\r\n    }\r\n}\r\nChartEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ChartEditorComponent, deps: [{ token: ChartEditorService }], target: i0.ɵɵFactoryTarget.Component });\r\nChartEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.2\", type: ChartEditorComponent, selector: \"app-chart-editor\", ngImport: i0, template: \"<div class=\\\"container\\\"\\r\\n[@chartEditorAnimate]='stateName'\\r\\n>\\r\\n<div class=\\\"chart-editor-header\\\">\\r\\n  <button mat-icon-button type=\\\"button\\\" class=\\\"btn-close\\\" aria-label=\\\"Close\\\" (click) = 'closeEditor()'>\\r\\n    <mat-icon>close</mat-icon>\\r\\n  </button>\\r\\n</div>\\r\\n\\r\\n  <mat-tab-group> \\r\\n      <mat-tab label = \\\"Data\\\">\\r\\n          <app-chart-setup></app-chart-setup>\\r\\n      </mat-tab>\\r\\n      <mat-tab label = \\\"Customise\\\">\\r\\n        <app-chart-customizer></app-chart-customizer>\\r\\n      </mat-tab>\\r\\n  </mat-tab-group>\\r\\n</div>\", styles: [\".container{display:flex;flex-direction:column;background-color:#f5f5f5;margin-top:10px;box-shadow:-11px -3px 19px -10px;min-height:40vh}.no-display{display:none}.chart-editor-header{display:flex;flex-direction:row;justify-content:flex-end}\\n\"], components: [{ type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i4$2.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { type: i4$6.MatTabGroup, selector: \"mat-tab-group\", inputs: [\"color\", \"disableRipple\"], exportAs: [\"matTabGroup\"] }, { type: i4$6.MatTab, selector: \"mat-tab\", inputs: [\"disabled\", \"label\", \"aria-label\", \"aria-labelledby\"], exportAs: [\"matTab\"] }, { type: ChartSetupComponent, selector: \"app-chart-setup\" }, { type: ChartCustomizerComponent, selector: \"app-chart-customizer\" }], animations: [\r\n        trigger('chartEditorAnimate', [\r\n            state('show', style({\r\n                opacity: 1,\r\n                visibility: 'visible',\r\n                display: 'block'\r\n            })),\r\n            state('hide', style({\r\n                opacity: 0,\r\n                visibility: 'hidden',\r\n                display: 'none'\r\n            })),\r\n            transition('show<=>hide', [\r\n                style({ display: 'block' }),\r\n                animate('200ms ease')\r\n            ])\r\n        ])\r\n    ] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ChartEditorComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'app-chart-editor',\r\n                    templateUrl: './chart-editor.component.html',\r\n                    styleUrls: ['./chart-editor.component.css'],\r\n                    animations: [\r\n                        trigger('chartEditorAnimate', [\r\n                            state('show', style({\r\n                                opacity: 1,\r\n                                visibility: 'visible',\r\n                                display: 'block'\r\n                            })),\r\n                            state('hide', style({\r\n                                opacity: 0,\r\n                                visibility: 'hidden',\r\n                                display: 'none'\r\n                            })),\r\n                            transition('show<=>hide', [\r\n                                style({ display: 'block' }),\r\n                                animate('200ms ease')\r\n                            ])\r\n                        ])\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: ChartEditorService }]; } });\n\nclass BarGraphComponent {\r\n    constructor(editorData, chartContainerService) {\r\n        this.editorData = editorData;\r\n        this.chartContainerService = chartContainerService;\r\n        this.chartId = new EventEmitter();\r\n    }\r\n    ngOnInit() {\r\n        this.barChart = new BarChart(this.editorData.UID());\r\n        //emit chart id on chart creation\r\n        this.chartId.emit(this.barChart.chartId);\r\n        this.chart = this.initChart();\r\n        // if input is provided then load data\r\n        if (this.barGraphData) {\r\n            this.chart.series = this.barGraphData.series;\r\n            this.chart.xaxis = this.barGraphData.xaxis;\r\n        }\r\n        // on toggle edit chart\r\n        this.editorData.isEditorOpen_current.subscribe(_editorState => {\r\n            this.isEditorOpen = _editorState[0];\r\n            this.editorState = _editorState;\r\n        });\r\n        // on data modified event\r\n        this.editorData.editorData_current.subscribe(_modifiedChartObject => {\r\n            if (this.chartObj != null) {\r\n                //update if chartType and chartID is the same\r\n                if (_modifiedChartObject.chartType == this.barChart.chartType && _modifiedChartObject.chartId == this.barChart.chartId) {\r\n                    this.chartData = _modifiedChartObject;\r\n                    this.UpdateChart(_modifiedChartObject.chartData);\r\n                    this.barChart = _modifiedChartObject;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    //#region component functions\r\n    initChart() {\r\n        return this.barChart.GetDefaults();\r\n    }\r\n    UpdateChart(chartOption) {\r\n        this.chartObj.updateOptions(chartOption);\r\n    }\r\n    // to open chart editor\r\n    EditChart() {\r\n        if (this.isEditorOpen) {\r\n            //if editor is already open\r\n            if (this.editorState[1] == this.barChart.chartId) {\r\n                // chart data is already loaded on the editor\r\n                this.editorData.ToggleEditor(!this.editorState[0], this.barChart.chartId);\r\n            }\r\n            else {\r\n                // need to load chart data on editor\r\n                this.editorData.ToggleEditor(this.editorState[0], this.barChart.chartId);\r\n                this.editorData.EditorDataUpdated(this.barChart);\r\n            }\r\n        }\r\n        else {\r\n            this.editorData.ToggleEditor(!this.editorState[0], this.barChart.chartId);\r\n            this.editorData.EditorDataUpdated(this.barChart);\r\n        }\r\n    }\r\n    DeleteChart() {\r\n        this.chartContainerService.DeleteChart(this.barChart.chartId);\r\n    }\r\n}\r\nBarGraphComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: BarGraphComponent, deps: [{ token: ChartEditorService }, { token: ChartContainerService }], target: i0.ɵɵFactoryTarget.Component });\r\nBarGraphComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.2\", type: BarGraphComponent, selector: \"app-bar-graph\", inputs: { barGraphData: \"barGraphData\" }, outputs: { chartId: \"chartId\" }, viewQueries: [{ propertyName: \"chartObj\", first: true, predicate: [\"chartObj\"], descendants: true }], ngImport: i0, template: \"<div class=\\\"container\\\">\\r\\n\\r\\n  <div class=\\\"chart-heading\\\">\\r\\n    <button mat-icon-button style=\\\"color: gray;\\\" id=\\\"edit-icon\\\" (click) = 'DeleteChart()'>\\r\\n      <mat-icon>delete</mat-icon>\\r\\n    </button>\\r\\n    <button mat-icon-button style=\\\"color: gray;\\\" id=\\\"edit-icon\\\" (click) = 'EditChart()'>\\r\\n      <mat-icon>more_vert</mat-icon>\\r\\n    </button>\\r\\n  </div>\\r\\n\\r\\n  <apx-chart #chartObj\\r\\n    [title] = \\\"chart.title\\\"\\r\\n    [series]=\\\"chart.series\\\"\\r\\n    [chart]=\\\"chart.chart\\\"\\r\\n    [dataLabels]=\\\"chart.dataLabels\\\"\\r\\n    [plotOptions]=\\\"chart.plotOptions\\\"\\r\\n    [xaxis]=\\\"chart.xaxis\\\"\\r\\n    [theme]=\\\"chart.theme\\\"\\r\\n  ></apx-chart>\\r\\n\\r\\n</div>\", styles: [\".container{display:flex;flex-direction:column;height:100%}.container>apx-chart{flex:1}.chart-heading{display:flex;flex-direction:row;justify-content:flex-end}\\n\"], components: [{ type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i4$2.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { type: i5$1.ChartComponent, selector: \"apx-chart\", inputs: [\"autoUpdateSeries\", \"chart\", \"annotations\", \"colors\", \"dataLabels\", \"series\", \"stroke\", \"labels\", \"legend\", \"markers\", \"noData\", \"fill\", \"tooltip\", \"plotOptions\", \"responsive\", \"xaxis\", \"yaxis\", \"grid\", \"states\", \"title\", \"subtitle\", \"theme\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: BarGraphComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'app-bar-graph',\r\n                    templateUrl: './bar-graph.component.html',\r\n                    styleUrls: ['./bar-graph.component.css']\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: ChartEditorService }, { type: ChartContainerService }]; }, propDecorators: { barGraphData: [{\r\n                type: Input\r\n            }], chartObj: [{\r\n                type: ViewChild,\r\n                args: ['chartObj']\r\n            }], chartId: [{\r\n                type: Output\r\n            }] } });\n\nclass PieChartComponent {\r\n    constructor(data, chartContainerService) {\r\n        this.data = data;\r\n        this.chartContainerService = chartContainerService;\r\n        this.chartId = new EventEmitter();\r\n    }\r\n    ngOnInit() {\r\n        this.pieChart = new PieChart(this.data.UID());\r\n        this.chart = this.initChart();\r\n        //emit chart id on chart creation\r\n        this.chartId.emit(this.pieChart.chartId);\r\n        if (this.pieChartData) {\r\n            this.chart.series = this.pieChartData.series,\r\n                this.chart.labels = this.pieChartData.labels;\r\n        }\r\n        // on toggle edit chart\r\n        this.data.isEditorOpen_current.subscribe(_editorState => {\r\n            this.isEditorOpen = _editorState[0];\r\n            this.editorState = _editorState;\r\n        });\r\n        // on data modified event\r\n        this.data.editorData_current.subscribe(graphData => {\r\n            this.EditorData = graphData;\r\n            if (this.chartObj != null) {\r\n                if (graphData.chartType == \"Pie\")\r\n                    this.updateChart(graphData);\r\n            }\r\n        });\r\n    }\r\n    //#region component functions\r\n    //to update the chart options\r\n    updateChart(chartOption) {\r\n        this.chartObj.updateOptions(chartOption);\r\n    }\r\n    // to open chart editor\r\n    EditChart() {\r\n        if (this.isEditorOpen) {\r\n            //if editor is already open\r\n            if (this.editorState[1] == this.pieChart.chartId) {\r\n                // chart data is already loaded on the editor\r\n                this.data.ToggleEditor(!this.editorState[0], this.pieChart.chartId);\r\n            }\r\n            else {\r\n                // need to load chart data on editor\r\n                this.data.ToggleEditor(this.editorState[0], this.pieChart.chartId);\r\n                this.data.EditorDataUpdated(this.pieChart);\r\n            }\r\n        }\r\n        else {\r\n            this.data.ToggleEditor(!this.editorState[0], this.pieChart.chartId);\r\n            this.data.EditorDataUpdated(this.pieChart);\r\n        }\r\n    }\r\n    /**\r\n     * to delete the selected chart\r\n     */\r\n    DeleteChart() {\r\n        this.chartContainerService.DeleteChart(this.pieChart.chartId);\r\n    }\r\n    initChart() {\r\n        return this.pieChart.GetDefaults();\r\n    }\r\n}\r\nPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: PieChartComponent, deps: [{ token: ChartEditorService }, { token: ChartContainerService }], target: i0.ɵɵFactoryTarget.Component });\r\nPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.2\", type: PieChartComponent, selector: \"app-pie-chart\", inputs: { pieChartData: \"pieChartData\" }, outputs: { chartId: \"chartId\" }, viewQueries: [{ propertyName: \"chartObj\", first: true, predicate: [\"chartObj\"], descendants: true }], ngImport: i0, template: \"<div class=\\\"container\\\">\\r\\n\\r\\n  <div class=\\\"chart-heading\\\"> \\r\\n    <button mat-icon-button color=\\\"primary\\\" style=\\\"color:gray\\\" id=\\\"edit-icon\\\" (click) = 'DeleteChart()'>\\r\\n      <mat-icon>delete</mat-icon>\\r\\n    </button>\\r\\n    <button mat-icon-button color=\\\"primary\\\" style=\\\"color:gray\\\" id=\\\"edit-icon\\\" (click) = 'EditChart()'>\\r\\n      <mat-icon>more_vert</mat-icon>\\r\\n    </button>\\r\\n  </div>\\r\\n\\r\\n  \\r\\n    <apx-chart #chartObj\\r\\n      [title] = \\\"chart.title\\\"\\r\\n      [series]=\\\"chart.series\\\"\\r\\n      [chart]=\\\"chart.chart\\\"\\r\\n      [labels]=\\\"chart.labels\\\"\\r\\n      [responsive]=\\\"chart.responsive\\\"\\r\\n    ></apx-chart>\\r\\n  \\r\\n</div>\", styles: [\".container{display:flex;flex-direction:column;height:100%}.container>apx-chart{flex:1}.chart-heading{display:flex;flex-direction:row;justify-content:flex-end}\\n\"], components: [{ type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i4$2.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { type: i5$1.ChartComponent, selector: \"apx-chart\", inputs: [\"autoUpdateSeries\", \"chart\", \"annotations\", \"colors\", \"dataLabels\", \"series\", \"stroke\", \"labels\", \"legend\", \"markers\", \"noData\", \"fill\", \"tooltip\", \"plotOptions\", \"responsive\", \"xaxis\", \"yaxis\", \"grid\", \"states\", \"title\", \"subtitle\", \"theme\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: PieChartComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'app-pie-chart',\r\n                    templateUrl: './pie-chart.component.html',\r\n                    styleUrls: ['./pie-chart.component.css']\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: ChartEditorService }, { type: ChartContainerService }]; }, propDecorators: { pieChartData: [{\r\n                type: Input\r\n            }], chartObj: [{\r\n                type: ViewChild,\r\n                args: ['chartObj']\r\n            }], chartId: [{\r\n                type: Output\r\n            }] } });\n\nclass KeyPerformanceIndicatorComponent {\r\n    constructor() {\r\n        this.kpiColor = 'green';\r\n    }\r\n    ngOnInit() {\r\n        this.kpi = new KPI(this.kpiData.name, this.kpiData.metric, this.kpiData.icon);\r\n    }\r\n}\r\nKeyPerformanceIndicatorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: KeyPerformanceIndicatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nKeyPerformanceIndicatorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.2\", type: KeyPerformanceIndicatorComponent, selector: \"app-kpi\", inputs: { kpiData: \"kpiData\" }, ngImport: i0, template: \"<div class=\\\"container\\\">\\r\\n\\r\\n    <div class=\\\"kpi-header\\\">\\r\\n\\r\\n        <button mat-icon-button disabled>\\r\\n            <mat-icon>{{this.kpiData.icon}}</mat-icon>\\r\\n        </button>\\r\\n        \\r\\n        <div style=\\\"margin-top: 10px; color: gray;\\\">\\r\\n            {{this.kpiData.name}}\\r\\n        </div>\\r\\n\\r\\n        <button mat-icon-button>\\r\\n            <mat-icon style=\\\"color: gray;\\\">more_vert</mat-icon>\\r\\n        </button>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"center\\\">\\r\\n            {{this.kpiData.metric | currency}}\\r\\n    </div>\\r\\n        \\r\\n</div>\\r\\n\\r\\n\", styles: [\".container{display:flex;flex-direction:column}.kpi-header{display:flex;flex-direction:row;justify-content:space-between}.center{margin:0;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);font-size:54px;font-weight:10px}\\n\"], components: [{ type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i4$2.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }], pipes: { \"currency\": i10.CurrencyPipe } });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: KeyPerformanceIndicatorComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'app-kpi',\r\n                    templateUrl: './key-performance-indicator.component.html',\r\n                    styleUrls: ['./key-performance-indicator.component.css']\r\n                }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { kpiData: [{\r\n                type: Input\r\n            }] } });\n\nclass LineChartComponent {\r\n    constructor(editorData, chartContainerService) {\r\n        this.editorData = editorData;\r\n        this.chartContainerService = chartContainerService;\r\n        this.chartId = new EventEmitter();\r\n    }\r\n    ngOnInit() {\r\n        this.lineChart = new LineChart(this.editorData.UID());\r\n        this.chart = this.initChart();\r\n        //emit chart id on chart creation\r\n        this.chartId.emit(this.lineChart.chartId);\r\n        if (this.lineChartData) {\r\n            this.chart.series = this.lineChartData.series;\r\n            this.chart.xaxis = this.lineChartData.xaxis;\r\n        }\r\n        // on toggle edit chart\r\n        this.editorData.isEditorOpen_current.subscribe(_editorState => {\r\n            this.isEditorOpen = _editorState[0];\r\n            this.editorState = _editorState;\r\n        });\r\n        // on data modified event\r\n        this.editorData.editorData_current.subscribe(_modifiedChartObject => {\r\n            if (this.chartObj != null) {\r\n                //update if chartType and chartID is the same\r\n                if (_modifiedChartObject.chartType == this.lineChart.chartType && _modifiedChartObject.chartId == this.lineChart.chartId) {\r\n                    this.chartData = _modifiedChartObject;\r\n                    this.updateChart(_modifiedChartObject.chartData);\r\n                    this.lineChart = _modifiedChartObject;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    //to update the chart options\r\n    updateChart(chartOption) {\r\n        this.chartObj.updateOptions(chartOption);\r\n    }\r\n    // to open chart editor\r\n    EditChart() {\r\n        if (this.isEditorOpen) {\r\n            //if editor is already open\r\n            if (this.editorState[1] == this.lineChart.chartId) {\r\n                // chart data is already loaded on the editor\r\n                this.editorData.ToggleEditor(!this.editorState[0], this.lineChart.chartId);\r\n            }\r\n            else {\r\n                // need to load chart data on editor\r\n                this.editorData.ToggleEditor(this.editorState[0], this.lineChart.chartId);\r\n                this.editorData.EditorDataUpdated(this.lineChart);\r\n            }\r\n        }\r\n        else {\r\n            this.editorData.ToggleEditor(!this.editorState[0], this.lineChart.chartId);\r\n            this.editorData.EditorDataUpdated(this.lineChart);\r\n        }\r\n    }\r\n    /**\r\n     * to the delete the selected chart\r\n     */\r\n    DeleteChart() {\r\n        this.chartContainerService.DeleteChart(this.lineChart.chartId);\r\n    }\r\n    initChart() {\r\n        return this.lineChart.GetDefaults();\r\n    }\r\n}\r\nLineChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: LineChartComponent, deps: [{ token: ChartEditorService }, { token: ChartContainerService }], target: i0.ɵɵFactoryTarget.Component });\r\nLineChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.2\", type: LineChartComponent, selector: \"app-line-chart\", inputs: { lineChartData: \"lineChartData\" }, outputs: { chartId: \"chartId\" }, viewQueries: [{ propertyName: \"chartObj\", first: true, predicate: [\"chartObj\"], descendants: true }], ngImport: i0, template: \"<div class=\\\"container\\\">\\r\\n\\r\\n  <div class=\\\"chart-heading\\\">\\r\\n    <button mat-icon-button style=\\\"color: gray;\\\" id=\\\"edit-icon\\\" (click) = 'DeleteChart()'>\\r\\n      <mat-icon>delete</mat-icon>\\r\\n    </button>\\r\\n    <button mat-icon-button style=\\\"color: gray;\\\" id=\\\"edit-icon\\\" (click) = 'EditChart()'>\\r\\n      <mat-icon>more_vert</mat-icon>\\r\\n    </button>\\r\\n  </div>\\r\\n\\r\\n  <apx-chart #chartObj\\r\\n    [series]=\\\"chart.series\\\"\\r\\n    [chart]=\\\"chart.chart\\\"\\r\\n    [xaxis]=\\\"chart.xaxis\\\"\\r\\n    [dataLabels]=\\\"chart.dataLabels\\\"\\r\\n    [grid]=\\\"chart.grid\\\"\\r\\n    [stroke]=\\\"chart.stroke\\\"\\r\\n    [title]=\\\"chart.title\\\"\\r\\n  ></apx-chart>\\r\\n\\r\\n</div>\", styles: [\".container{display:flex;flex-direction:column;height:100%}.container>apx-chart{flex:1}.chart-heading{display:flex;flex-direction:row;justify-content:flex-end}\\n\"], components: [{ type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i4$2.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { type: i5$1.ChartComponent, selector: \"apx-chart\", inputs: [\"autoUpdateSeries\", \"chart\", \"annotations\", \"colors\", \"dataLabels\", \"series\", \"stroke\", \"labels\", \"legend\", \"markers\", \"noData\", \"fill\", \"tooltip\", \"plotOptions\", \"responsive\", \"xaxis\", \"yaxis\", \"grid\", \"states\", \"title\", \"subtitle\", \"theme\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: LineChartComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'app-line-chart',\r\n                    templateUrl: './line-chart.component.html',\r\n                    styleUrls: ['./line-chart.component.css']\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: ChartEditorService }, { type: ChartContainerService }]; }, propDecorators: { lineChartData: [{\r\n                type: Input\r\n            }], chartObj: [{\r\n                type: ViewChild,\r\n                args: ['chartObj']\r\n            }], chartId: [{\r\n                type: Output\r\n            }] } });\n\nclass ChartsContainerComponent {\r\n    /**\r\n     * @param dashboardService to fetch data for dashboard\r\n     * @param chartContainerService service to transfer chart data between components\r\n     */\r\n    constructor(dashboardService, chartContainerService, chartEditorService) {\r\n        this.dashboardService = dashboardService;\r\n        this.chartContainerService = chartContainerService;\r\n        this.chartEditorService = chartEditorService;\r\n        this.showChartTypesList = false;\r\n        this._dashboard = dashboardService.loadDashboardData();\r\n        //toggle demo charts\r\n        if (AppConfig.settings.variables.demoChartVisible) {\r\n            this._dashboard.charts = [];\r\n        }\r\n        this.chartEditorService.editorData_current.subscribe(_chartObject => {\r\n            this._currentChartData = _chartObject;\r\n        });\r\n    }\r\n    //#region gridster static methods \r\n    static itemChange(item, itemComponent) {\r\n        console.info('itemChanged', item, itemComponent);\r\n    }\r\n    static itemResize(item, itemComponent) {\r\n        console.info('itemResized', item, itemComponent);\r\n    }\r\n    UpdateChart(item, itemComponent) {\r\n    }\r\n    //#endregion\r\n    ngOnInit() {\r\n        // bind deleteChart function to service's delete chart function\r\n        this.chartContainerService.DeleteSelectedChart(this.DeleteChart.bind(this));\r\n        //initialize listOfChartTypes\r\n        this.listOfChartTypes = this.dashboardService.GetListOfChartTypes();\r\n        //#region gridster init\r\n        this.options = {\r\n            gridType: GridType.Fit,\r\n            compactType: CompactType.None,\r\n            margin: 10,\r\n            outerMargin: true,\r\n            outerMarginTop: null,\r\n            outerMarginRight: null,\r\n            outerMarginBottom: null,\r\n            outerMarginLeft: null,\r\n            useTransformPositioning: true,\r\n            mobileBreakpoint: 640,\r\n            minCols: 160,\r\n            maxCols: 160,\r\n            minRows: 100,\r\n            maxRows: 100,\r\n            maxItemCols: 200,\r\n            minItemCols: 1,\r\n            maxItemRows: 200,\r\n            minItemRows: 1,\r\n            maxItemArea: 40000,\r\n            minItemArea: 1,\r\n            defaultItemCols: 1,\r\n            defaultItemRows: 1,\r\n            fixedColWidth: 105,\r\n            fixedRowHeight: 105,\r\n            keepFixedHeightInMobile: false,\r\n            keepFixedWidthInMobile: false,\r\n            scrollSensitivity: 10,\r\n            scrollSpeed: 20,\r\n            enableEmptyCellClick: false,\r\n            enableEmptyCellContextMenu: false,\r\n            enableEmptyCellDrop: false,\r\n            enableEmptyCellDrag: false,\r\n            enableOccupiedCellDrop: false,\r\n            emptyCellDragMaxCols: 50,\r\n            emptyCellDragMaxRows: 50,\r\n            ignoreMarginInRow: false,\r\n            draggable: {\r\n                enabled: true,\r\n            },\r\n            resizable: {\r\n                enabled: true,\r\n            },\r\n            swap: false,\r\n            pushItems: true,\r\n            disablePushOnDrag: false,\r\n            disablePushOnResize: false,\r\n            pushDirections: { north: false, east: false, south: false, west: false },\r\n            pushResizeItems: false,\r\n            displayGrid: DisplayGrid.None,\r\n            disableWindowResize: false,\r\n            disableWarnings: false,\r\n            scrollToNewItems: false,\r\n            itemResizeCallback: this.UpdateChart,\r\n        };\r\n    }\r\n    //#region gridster methods\r\n    changedOptions() {\r\n        if (this.options.api && this.options.api.optionsChanged) {\r\n            this.options.api.optionsChanged();\r\n        }\r\n    }\r\n    removeItem($event, item) {\r\n        $event.preventDefault();\r\n        $event.stopPropagation();\r\n        this.dashboard.splice(this.dashboard.indexOf(item), 1);\r\n    }\r\n    addItem() {\r\n        this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\r\n    }\r\n    //#endregion\r\n    AddChart(chartType) {\r\n        /**\r\n         * add chart type on selection basis\r\n         * dynamically load chart component\r\n         */\r\n        if (chartType.toUpperCase() == \"BAR\") {\r\n            this._dashboard.charts.push(this.dashboardService.GetDefaultBarChartObject());\r\n        }\r\n        if (chartType.toUpperCase() == \"PIE\") {\r\n            this._dashboard.charts.push(this.dashboardService.GetDefaultPieChartObject());\r\n        }\r\n        if (chartType.toUpperCase() == \"KPI\") {\r\n            this._dashboard.charts.push(this.dashboardService.GetDefaultKpiChartObject());\r\n        }\r\n        if (chartType.toUpperCase() == \"LINE\") {\r\n            this._dashboard.charts.push(this.dashboardService.GetDefaultLineChartObject());\r\n        }\r\n        this.showChartTypesList = false;\r\n    }\r\n    DeleteChart(chartId) {\r\n        /**\r\n         * will be called from chart itself using chart-container service\r\n         * remove from UI\r\n         * update dashboard\r\n         */\r\n        //filter out the chart not required based on id\r\n        var filteredData = this._dashboard.charts.filter((chartData) => {\r\n            return chartData.chartID != chartId;\r\n        });\r\n        this._dashboard.charts = filteredData;\r\n    }\r\n    SaveDashboard() {\r\n        /**\r\n         * creates dashboard object\r\n         * returns the object to be saved\r\n         */\r\n        this.dashboardService.SaveDashboardData(this._dashboard);\r\n    }\r\n}\r\nChartsContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ChartsContainerComponent, deps: [{ token: DashboardService }, { token: ChartContainerService }, { token: ChartEditorService }], target: i0.ɵɵFactoryTarget.Component });\r\nChartsContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.2\", type: ChartsContainerComponent, selector: \"app-charts-container\", viewQueries: [{ propertyName: \"newChart\", first: true, predicate: NewChartTabDirective, descendants: true, static: true }], ngImport: i0, template: \"<!--drop down menu items-------------------------------- -->\\r\\n\\r\\n<mat-menu #chartTypeMenu=\\\"matMenu\\\">\\r\\n  <div *ngFor=\\\"let chartTypeItem of listOfChartTypes\\\">\\r\\n    <button mat-menu-item (click) = \\\"AddChart(chartTypeItem.name)\\\">\\r\\n      <mat-icon>{{chartTypeItem.icon}}</mat-icon>\\r\\n      <span>{{chartTypeItem.name}}</span>\\r\\n    </button>\\r\\n  </div>\\r\\n</mat-menu>\\r\\n\\r\\n<!-- -------------------------------------------------- -->\\r\\n<div class = \\\"top-toolbar\\\">\\r\\n  <mat-toolbar class = \\\"edit-toolbar-options\\\" color = 'basic'>\\r\\n    <div>\\r\\n      <button mat-button color = \\\"primary\\\" [matMenuTriggerFor]=\\\"chartTypeMenu\\\">\\r\\n        Add Chart\\r\\n      </button>\\r\\n      <button mat-button color = \\\"primary\\\">\\r\\n        Save Chart\\r\\n      </button>\\r\\n    </div>\\r\\n  </mat-toolbar>\\r\\n</div>\\r\\n\\r\\n\\r\\n  <div class='chart-container'>\\r\\n    <!-- chart editor declared -->\\r\\n    <app-chart-editor id = 'chart-editor'></app-chart-editor>\\r\\n    \\r\\n    <div class=\\\"gridster-grid\\\" >\\r\\n      <gridster [options]=\\\"options\\\" style=\\\"background-color: rgb(227, 228, 228);\\\">\\r\\n        <gridster-item [item]=\\\"item.position\\\" *ngFor=\\\"let item of _dashboard.charts\\\">\\r\\n          <ng-template [ngIf]=\\\"item.chartType=='bar'\\\">\\r\\n            <app-bar-graph [barGraphData] = 'item.chartData' (chartId) = \\\"item.chartID = $event\\\"></app-bar-graph>\\r\\n          </ng-template>\\r\\n          <ng-template [ngIf]=\\\"item.chartType=='pie'\\\">\\r\\n            <app-pie-chart [pieChartData] = 'item.chartData' (chartId) = \\\"item.chartID = $event\\\"></app-pie-chart>\\r\\n          </ng-template>\\r\\n          <ng-template [ngIf]=\\\"item.chartType=='kpi'\\\">\\r\\n            <app-kpi [kpiData] = 'item.chartData'></app-kpi>\\r\\n          </ng-template>\\r\\n          <ng-template [ngIf]=\\\"item.chartType=='line'\\\">\\r\\n            <app-line-chart [lineChartData] = 'item.chartData' (chartId) = \\\"item.chartID = $event\\\"></app-line-chart>\\r\\n          </ng-template>\\r\\n        </gridster-item>\\r\\n      </gridster>\\r\\n    </div>\\r\\n\\r\\n  </div>\", styles: [\".chart-container{display:grid;grid-template-columns:auto;height:200vh}#chart-editor{position:absolute;z-index:20;right:-0px}.no-display{display:none}.top-toolbar{position:sticky;top:0;z-index:21}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:block!important;align-items:flex-start;justify-content:flex-start;height:100%;width:100%;padding:0;margin:0}#addChartIcon{transform:scale(2)}#ddl-chart-types{position:absolute;min-width:200px;z-index:1;left:78ex;box-shadow:0 1px 2px #00000012,0 2px 4px #00000012,0 4px 8px #00000012,0 8px 16px #00000012,0 16px 32px #00000012,0 32px 64px #00000012}.edit-toolbar-options{justify-content:flex-end}\\n\"], components: [{ type: i8.MatMenu, selector: \"mat-menu\", exportAs: [\"matMenu\"] }, { type: i8.MatMenuItem, selector: \"[mat-menu-item]\", inputs: [\"disabled\", \"disableRipple\", \"role\"], exportAs: [\"matMenuItem\"] }, { type: i4$2.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { type: i4$4.MatToolbar, selector: \"mat-toolbar\", inputs: [\"color\"], exportAs: [\"matToolbar\"] }, { type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: ChartEditorComponent, selector: \"app-chart-editor\" }, { type: i6.GridsterComponent, selector: \"gridster\", inputs: [\"options\"] }, { type: i6.GridsterItemComponent, selector: \"gridster-item\", inputs: [\"item\"] }, { type: BarGraphComponent, selector: \"app-bar-graph\", inputs: [\"barGraphData\"], outputs: [\"chartId\"] }, { type: PieChartComponent, selector: \"app-pie-chart\", inputs: [\"pieChartData\"], outputs: [\"chartId\"] }, { type: KeyPerformanceIndicatorComponent, selector: \"app-kpi\", inputs: [\"kpiData\"] }, { type: LineChartComponent, selector: \"app-line-chart\", inputs: [\"lineChartData\"], outputs: [\"chartId\"] }], directives: [{ type: i10.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i8.MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", inputs: [\"matMenuTriggerRestoreFocus\", \"mat-menu-trigger-for\", \"matMenuTriggerFor\", \"matMenuTriggerData\"], outputs: [\"menuOpened\", \"onMenuOpen\", \"menuClosed\", \"onMenuClose\"], exportAs: [\"matMenuTrigger\"] }, { type: i10.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ChartsContainerComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'app-charts-container',\r\n                    templateUrl: './charts-container.component.html',\r\n                    styleUrls: ['./charts-container.component.css'],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: DashboardService }, { type: ChartContainerService }, { type: ChartEditorService }]; }, propDecorators: { newChart: [{\r\n                type: ViewChild,\r\n                args: [NewChartTabDirective, { static: true }]\r\n            }] } });\n\nconst routes = [\r\n    { path: 'dashboard/all', component: DashboardContainerComponent },\r\n    { path: 'dashboard/current', component: ChartsContainerComponent },\r\n    {\r\n        path: \"\",\r\n        redirectTo: '/dashboard/all',\r\n        pathMatch: 'full'\r\n    }\r\n];\r\nclass AppRoutingModule {\r\n}\r\nAppRoutingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: AppRoutingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nAppRoutingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: AppRoutingModule, imports: [i1$2.RouterModule], exports: [RouterModule] });\r\nAppRoutingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: AppRoutingModule, imports: [[RouterModule.forRoot(routes)], RouterModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: AppRoutingModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [RouterModule.forRoot(routes)],\r\n                    exports: [RouterModule]\r\n                }]\r\n        }] });\r\nconst routingComponents = [DashboardContainerComponent, ChartsContainerComponent];\n\nclass ReadExcelDirective {\r\n    constructor() {\r\n        this.dataReadEvent = new EventEmitter();\r\n    }\r\n    OnChange(target) {\r\n        const file = target.files[0];\r\n        const excelObservable = new Observable((subscriber) => {\r\n            this.ReadFile(file, subscriber);\r\n        });\r\n        excelObservable.subscribe((data) => {\r\n            this.dataReadEvent.emit(data);\r\n        });\r\n    }\r\n    ReadFile(file, subscriber) {\r\n        const fileReader = new FileReader();\r\n        // reading file as buffer\r\n        fileReader.readAsArrayBuffer(file);\r\n        fileReader.onload = (e) => {\r\n            const bufferArray = e.target.result;\r\n            // creating workbook from file \r\n            const wb = XLSX.read(bufferArray, { type: 'buffer' });\r\n            subscriber.next(wb);\r\n            subscriber.complete();\r\n        };\r\n    }\r\n}\r\nReadExcelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ReadExcelDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\nReadExcelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.0.2\", type: ReadExcelDirective, selector: \"[ReadExcel]\", outputs: { dataReadEvent: \"dataReadEvent\" }, host: { listeners: { \"change\": \"OnChange($event.target)\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: ReadExcelDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[ReadExcel]'\r\n                }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { dataReadEvent: [{\r\n                type: Output\r\n            }], OnChange: [{\r\n                type: HostListener,\r\n                args: [\"change\", [\"$event.target\"]]\r\n            }] } });\n\nfunction initializeApp(appConfig) {\r\n    return () => appConfig.load();\r\n}\r\nclass DashxModule {\r\n}\r\nDashxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DashxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nDashxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DashxModule, declarations: [DashxComponent, LineChartComponent, PieChartComponent, BarGraphComponent, ChartEditorComponent, ChartSetupComponent, ReadExcelDirective, KeyPerformanceIndicatorComponent, DashboardContainerComponent, ChartsContainerComponent, NewChartTabDirective, ChartCustomizerComponent, CreateDashboardComponent, AddDashboardComponent, DashboardContainerComponent, ChartsContainerComponent], imports: [CommonModule,\r\n        AppRoutingModule,\r\n        NgApexchartsModule,\r\n        MatToolbarModule,\r\n        MatCardModule,\r\n        MatFormFieldModule,\r\n        MatIconModule,\r\n        MatInputModule,\r\n        MatButtonModule,\r\n        MatGridListModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatCheckboxModule,\r\n        MatSliderModule,\r\n        MatTabsModule,\r\n        MatExpansionModule,\r\n        MatDividerModule,\r\n        MatListModule,\r\n        MatExpansionModule,\r\n        MatMenuModule,\r\n        MatRadioModule,\r\n        BrowserAnimationsModule,\r\n        GridsterModule,\r\n        HttpClientModule,\r\n        MatDialogModule], exports: [DashxComponent,\r\n        DashboardContainerComponent,\r\n        ChartsContainerComponent] });\r\nDashxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DashxModule, providers: [\r\n        AppConfig,\r\n        {\r\n            provide: APP_INITIALIZER,\r\n            useFactory: initializeApp,\r\n            deps: [AppConfig], multi: true\r\n        },\r\n        DashboardService,\r\n        ChartEditorService,\r\n        DataHandlerService,\r\n        { provide: MAT_COLOR_FORMATS, useValue: NGX_MAT_COLOR_FORMATS }\r\n    ], imports: [[\r\n            CommonModule,\r\n            AppRoutingModule,\r\n            NgApexchartsModule,\r\n            MatToolbarModule,\r\n            MatCardModule,\r\n            MatFormFieldModule,\r\n            MatIconModule,\r\n            MatInputModule,\r\n            MatButtonModule,\r\n            MatGridListModule,\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n            MatCheckboxModule,\r\n            MatSliderModule,\r\n            MatTabsModule,\r\n            MatExpansionModule,\r\n            MatDividerModule,\r\n            MatListModule,\r\n            MatExpansionModule,\r\n            MatMenuModule,\r\n            MatRadioModule,\r\n            BrowserAnimationsModule,\r\n            GridsterModule,\r\n            HttpClientModule,\r\n            MatDialogModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.2\", ngImport: i0, type: DashxModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        DashxComponent, LineChartComponent, PieChartComponent, BarGraphComponent, ChartEditorComponent, ChartSetupComponent, ReadExcelDirective, KeyPerformanceIndicatorComponent, routingComponents, NewChartTabDirective, ChartCustomizerComponent, CreateDashboardComponent, AddDashboardComponent, DashboardContainerComponent, ChartsContainerComponent\r\n                    ],\r\n                    imports: [\r\n                        CommonModule,\r\n                        AppRoutingModule,\r\n                        NgApexchartsModule,\r\n                        MatToolbarModule,\r\n                        MatCardModule,\r\n                        MatFormFieldModule,\r\n                        MatIconModule,\r\n                        MatInputModule,\r\n                        MatButtonModule,\r\n                        MatGridListModule,\r\n                        FormsModule,\r\n                        ReactiveFormsModule,\r\n                        MatCheckboxModule,\r\n                        MatSliderModule,\r\n                        MatTabsModule,\r\n                        MatExpansionModule,\r\n                        MatDividerModule,\r\n                        MatListModule,\r\n                        MatExpansionModule,\r\n                        MatMenuModule,\r\n                        MatRadioModule,\r\n                        BrowserAnimationsModule,\r\n                        GridsterModule,\r\n                        HttpClientModule,\r\n                        MatDialogModule\r\n                    ],\r\n                    exports: [\r\n                        DashxComponent,\r\n                        DashboardContainerComponent,\r\n                        ChartsContainerComponent\r\n                    ],\r\n                    providers: [\r\n                        AppConfig,\r\n                        {\r\n                            provide: APP_INITIALIZER,\r\n                            useFactory: initializeApp,\r\n                            deps: [AppConfig], multi: true\r\n                        },\r\n                        DashboardService,\r\n                        ChartEditorService,\r\n                        DataHandlerService,\r\n                        { provide: MAT_COLOR_FORMATS, useValue: NGX_MAT_COLOR_FORMATS }\r\n                    ]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of dashx\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ChartsContainerComponent, DashboardContainerComponent, DashxComponent, DashxModule, DashxService, initializeApp };\n"]},"metadata":{},"sourceType":"module"}